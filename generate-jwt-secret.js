// G√©n√©rateur de JWT_SECRET s√©curis√©
const crypto = require('crypto');

function generateJWTSecret() {
  console.log('üîê G√âN√âRATEUR DE JWT_SECRET');
  console.log('============================');
  
  // M√©thode 1: Hex (recommand√©e)
  const hexSecret = crypto.randomBytes(32).toString('hex');
  console.log('\nüìã JWT_SECRET (Hex - Recommand√©):');
  console.log(hexSecret);
  
  // M√©thode 2: Base64
  const base64Secret = crypto.randomBytes(32).toString('base64');
  console.log('\nüìã JWT_SECRET (Base64):');
  console.log(base64Secret);
  
  // M√©thode 3: UUID-based
  const uuidSecret = crypto.randomUUID() + '-' + crypto.randomUUID();
  console.log('\nüìã JWT_SECRET (UUID-based):');
  console.log(uuidSecret);
  
  console.log('\n‚úÖ COMMENT UTILISER:');
  console.log('1. Copiez une des cl√©s g√©n√©r√©es ci-dessus');
  console.log('2. Remplacez "your-secret-key-for-jwt-tokens" dans .env.local');
  console.log('3. Red√©marrez votre serveur de d√©veloppement');
  
  console.log('\n‚ö†Ô∏è  IMPORTANT:');
  console.log('- Ne partagez JAMAIS cette cl√©');
  console.log('- Utilisez une cl√© diff√©rente en production');
  console.log('- La cl√© doit avoir au moins 32 caract√®res');
  
  return hexSecret;
}

// G√©n√©rer et afficher
const newSecret = generateJWTSecret();

// Exemple de mise √† jour automatique du .env.local
console.log('\nüîß LIGNE COMPL√àTE POUR .env.local:');
console.log(`JWT_SECRET=${newSecret}`);

module.exports = { generateJWTSecret };
