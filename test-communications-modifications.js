// Test des modifications de l'affichage des communications
// Ce script v√©rifie que les am√©liorations sont bien appliqu√©es

async function testCommunicationsDisplay() {
  console.log('üß™ Test des modifications d\'affichage des communications');
  
  try {
    // V√©rifier que la page communications existe
    const currentUrl = window.location.href;
    console.log('üìç URL actuelle:', currentUrl);
    
    if (currentUrl.includes('/dashboard/fans/communications')) {
      console.log('‚úÖ Page communications d√©tect√©e');
      
      // V√©rifier les √©l√©ments de l'interface
      const tests = [
        {
          name: 'Bouton de cr√©ation de communication',
          selector: 'button[class*="bg-gradient-to-r"]',
          expected: true
        },
        {
          name: 'Liste des communications',
          selector: '[class*="grid"][class*="gap-4"]',
          expected: true
        },
        {
          name: 'Absence de l\'ID dans les d√©tails (v√©rification visuelle)',
          selector: 'label:contains("ID Communication")',
          expected: false
        }
      ];
      
      for (const test of tests) {
        try {
          const element = document.querySelector(test.selector);
          const exists = element !== null;
          
          if (exists === test.expected) {
            console.log(`‚úÖ ${test.name}: OK`);
          } else {
            console.log(`‚ùå ${test.name}: √âCHEC (attendu: ${test.expected}, trouv√©: ${exists})`);
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è ${test.name}: Erreur lors du test`, error);
        }
      }
      
      // Test sp√©cifique pour l'affichage des communications
      const communicationCards = document.querySelectorAll('[class*="bg-white"][class*="rounded-lg"]');
      console.log(`üìä ${communicationCards.length} cartes de communication trouv√©es`);
      
      return {
        success: true,
        message: 'Tests d\'affichage termin√©s',
        cardsFound: communicationCards.length
      };
      
    } else {
      console.log('‚ùå Pas sur la page communications');
      console.log('üí° Naviguez vers /dashboard/fans/communications pour effectuer les tests');
      return {
        success: false,
        message: 'Page incorrecte pour les tests'
      };
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
    return {
      success: false,
      message: 'Erreur lors des tests',
      error: error.message
    };
  }
}

// Test de r√©cup√©ration du nom d'utilisateur
async function testUserNameRetrieval() {
  console.log('üë§ Test de r√©cup√©ration des noms d\'utilisateur');
  
  try {
    // V√©rifier l'authentification
    const { auth } = await import('../app/firebase/config');
    if (!auth.currentUser) {
      console.log('‚ùå Utilisateur non connect√©');
      return { success: false, message: 'Non connect√©' };
    }
    
    const token = await auth.currentUser.getIdToken();
    const userId = auth.currentUser.uid;
    
    // Test de r√©cup√©ration du profil utilisateur
    const response = await fetch(`/api/users/${userId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const userData = await response.json();
      console.log('‚úÖ Donn√©es utilisateur r√©cup√©r√©es:', userData);
      
      const name = userData.nom || userData.firstName || userData.displayName || userData.email || 'Nom non trouv√©';
      console.log('üìõ Nom d\'affichage extrait:', name);
      
      return {
        success: true,
        message: 'R√©cup√©ration du nom r√©ussie',
        userName: name,
        userData: userData
      };
    } else {
      console.log('‚ùå Erreur r√©cup√©ration utilisateur:', response.status);
      return {
        success: false,
        message: 'Erreur API utilisateur'
      };
    }
    
  } catch (error) {
    console.error('‚ùå Erreur test nom utilisateur:', error);
    return {
      success: false,
      message: 'Erreur test',
      error: error.message
    };
  }
}

// Test complet
async function testCommunicationsModifications() {
  console.log('üöÄ === TEST COMPLET DES MODIFICATIONS COMMUNICATIONS ===\n');
  
  const displayTest = await testCommunicationsDisplay();
  console.log('\n');
  const userNameTest = await testUserNameRetrieval();
  
  console.log('\nüìä === R√âSULTATS ===');
  console.log('üñºÔ∏è Test d\'affichage:', displayTest.success ? '‚úÖ' : '‚ùå');
  console.log('üë§ Test nom utilisateur:', userNameTest.success ? '‚úÖ' : '‚ùå');
  
  const allSuccess = displayTest.success && userNameTest.success;
  console.log(`\nüéØ Statut global: ${allSuccess ? '‚úÖ Tous les tests pass√©s' : '‚ùå Certains tests ont √©chou√©'}`);
  
  return {
    display: displayTest,
    userName: userNameTest,
    overall: allSuccess
  };
}

// Export pour utilisation
if (typeof window !== 'undefined') {
  window.testCommunicationsDisplay = testCommunicationsDisplay;
  window.testUserNameRetrieval = testUserNameRetrieval;
  window.testCommunicationsModifications = testCommunicationsModifications;
}

export { testCommunicationsDisplay, testUserNameRetrieval, testCommunicationsModifications };
