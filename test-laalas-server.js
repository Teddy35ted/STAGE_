/**
 * Test de diagnostic c√¥t√© serveur pour l'API laalas
 */

const { adminDb } = require('./app/Backend/config/firebase-admin.ts');

async function testFirestoreConnection() {
  try {
    console.log('üîç Test de connexion Firestore...');
    
    // Test de connexion basique
    const testDoc = await adminDb.collection('_test').limit(1).get();
    console.log('‚úÖ Connexion Firestore r√©ussie');
    
    // Test de lecture collection laalas
    console.log('üîç Test de lecture collection laalas...');
    const laalasSnapshot = await adminDb.collection('laalas').limit(5).get();
    
    console.log(`üìä Nombre de documents dans laalas: ${laalasSnapshot.size}`);
    
    if (laalasSnapshot.size > 0) {
      console.log('üìã Exemple de documents laalas:');
      laalasSnapshot.docs.forEach((doc, index) => {
        const data = doc.data();
        console.log(`  ${index + 1}. ID: ${doc.id}`);
        console.log(`     Nom: ${data.nom || 'N/A'}`);
        console.log(`     Cr√©ateur: ${data.idCreateur || 'N/A'}`);
        console.log(`     Date: ${data.date ? data.date.toDate() : 'N/A'}`);
        console.log('     ---');
      });
    } else {
      console.log('‚ö†Ô∏è Aucun document trouv√© dans la collection laalas');
    }
    
    // Test de requ√™te avec filtre
    console.log('üîç Test de requ√™te filtr√©e...');
    const filteredSnapshot = await adminDb.collection('laalas')
      .orderBy('date', 'desc')
      .limit(3)
      .get();
    
    console.log(`üìä Nombre de documents avec tri: ${filteredSnapshot.size}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test Firestore:', error);
    
    if (error.code === 'failed-precondition') {
      console.log('‚ö†Ô∏è Index composite manquant. V√©rifiez firestore.indexes.json');
    }
    
    return false;
  }
}

async function testLaalaService() {
  try {
    console.log('üîç Test du LaalaService...');
    
    // Import dynamique du service
    const { LaalaService } = require('./app/Backend/services/collections/LaalaService.ts');
    const service = new LaalaService();
    
    // Test getAll
    console.log('üìã Test getAll...');
    const allLaalas = await service.getAll({ limit: 5 });
    console.log(`‚úÖ getAll retourn√©: ${allLaalas.length} laalas`);
    
    if (allLaalas.length > 0) {
      // Test getByCreator avec un cr√©ateur existant
      const firstCreator = allLaalas[0].idCreateur;
      console.log(`üîç Test getByCreator pour: ${firstCreator}...`);
      
      const creatorLaalas = await service.getByCreator(firstCreator);
      console.log(`‚úÖ getByCreator retourn√©: ${creatorLaalas.length} laalas`);
      
      if (creatorLaalas.length > 0) {
        // Test getById
        const firstId = creatorLaalas[0].id;
        console.log(`üîç Test getById pour: ${firstId}...`);
        
        const singleLaala = await service.getById(firstId);
        console.log(`‚úÖ getById retourn√©:`, singleLaala ? 'OK' : 'NULL');
      }
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test LaalaService:', error);
    return false;
  }
}

async function runDiagnostics() {
  console.log('üöÄ D√©marrage des diagnostics serveur laalas...\n');
  
  const results = {
    firestore: false,
    service: false
  };
  
  // Test 1: Connexion Firestore
  console.log('=== TEST 1: CONNEXION FIRESTORE ===');
  results.firestore = await testFirestoreConnection();
  console.log('');
  
  // Test 2: Service LaalaService
  if (results.firestore) {
    console.log('=== TEST 2: LAALA SERVICE ===');
    results.service = await testLaalaService();
    console.log('');
  } else {
    console.log('‚è≠Ô∏è Test service ignor√© (connexion Firestore √©chou√©e)');
  }
  
  // R√©sum√©
  console.log('=== R√âSUM√â DES TESTS ===');
  console.log(`Firestore: ${results.firestore ? '‚úÖ' : '‚ùå'}`);
  console.log(`Service: ${results.service ? '‚úÖ' : '‚ùå'}`);
  
  if (results.firestore && results.service) {
    console.log('\nüéâ Tous les tests r√©ussis ! Le probl√®me pourrait √™tre au niveau de l\'authentification ou du frontend.');
  } else {
    console.log('\n‚ùå Des probl√®mes d√©tect√©s. V√©rifiez les erreurs ci-dessus.');
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  runDiagnostics().catch(console.error);
}

module.exports = { runDiagnostics, testFirestoreConnection, testLaalaService };