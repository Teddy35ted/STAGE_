{
  "timestamp": "2025-09-05T09:34:44.533Z",
  "deletedFiles": [
    {
      "path": "app/api/co-gestionnaires/check-email-new/route.ts",
      "content": "import { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { email } = await request.json();\r\n\r\n    // TODO: Impl√©menter la logique de v√©rification d'email\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Email v√©rifi√©'\r\n    });\r\n    \r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Erreur serveur' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"
    },
    {
      "path": "app/api/auth/co-gestionnaire/route.ts",
      "content": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { CoGestionnaireAuthService } from '../../../Backend/services/auth/CoGestionnaireAuthService';\r\n\r\nconst authService = new CoGestionnaireAuthService();\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('üîê Tentative de connexion co-gestionnaire...');\r\n    \r\n    const { email, password } = await request.json();\r\n    \r\n    // Validation des donn√©es\r\n    if (!email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Email et mot de passe requis' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Authentifier le co-gestionnaire\r\n    const authResult = await authService.authenticateCoGestionnaire(email, password);\r\n    \r\n    console.log('‚úÖ Co-gestionnaire connect√©:', authResult.coGestionnaire.nom);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Connexion r√©ussie',\r\n      data: {\r\n        user: {\r\n          id: authResult.coGestionnaire.id,\r\n          nom: authResult.coGestionnaire.nom,\r\n          prenom: authResult.coGestionnaire.prenom,\r\n          email: authResult.coGestionnaire.email,\r\n          role: authResult.coGestionnaire.role,\r\n          permissions: authResult.coGestionnaire.permissions,\r\n          isCoGestionnaire: true,\r\n          proprietaireId: authResult.proprietaireId\r\n        },\r\n        token: authResult.authToken\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Erreur connexion co-gestionnaire:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: '√âchec de la connexion',\r\n        details: error instanceof Error ? error.message : 'Erreur inconnue'\r\n      },\r\n      { status: 401 }\r\n    );\r\n  }\r\n}\r\n"
    },
    {
      "path": "app/api/auth/co-gestionnaire-login/route.ts",
      "content": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { CoGestionnaireAuthService } from '../../../Backend/services/auth/CoGestionnaireAuthService';\r\n\r\nconst authService = new CoGestionnaireAuthService();\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { email, password } = await request.json();\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Email et mot de passe requis' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Authentifier le co-gestionnaire\r\n    const authResult = await authService.authenticateCoGestionnaire(email, password);\r\n    \r\n    // V√©rifier si le changement de mot de passe est requis\r\n    const requiresPasswordChange = await authService.requiresPasswordChange(authResult.coGestionnaire.id);\r\n\r\n    // Retourner les informations sans le mot de passe\r\n    const { password: _, ...coGestionnaireWithoutPassword } = authResult.coGestionnaire;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      coGestionnaire: coGestionnaireWithoutPassword,\r\n      proprietaireId: authResult.proprietaireId,\r\n      authToken: authResult.authToken,\r\n      requiresPasswordChange\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('Erreur lors de la connexion co-gestionnaire:', error);\r\n    return NextResponse.json(\r\n      { error: error.message || 'Erreur lors de la connexion' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n}\r\n"
    },
    {
      "path": "app/api/auth/login-temporary/route.ts",
      "content": "// API pour la connexion avec mot de passe temporaire et changement obligatoire\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { UserService } from '../../../Backend/services/collections/UserService';\r\nimport { AccountRequestService } from '../../../Backend/services/collections/AccountRequestService';\r\n\r\nconst userService = new UserService();\r\nconst accountRequestService = new AccountRequestService();\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { email, temporaryPassword, newPassword } = await request.json();\r\n\r\n    console.log('üîç Tentative de connexion temporaire:', { \r\n      email, \r\n      hasTemporaryPassword: !!temporaryPassword,\r\n      hasNewPassword: !!newPassword \r\n    });\r\n\r\n    // Validation de base\r\n    if (!email || !temporaryPassword) {\r\n      console.log('‚ùå Validation √©chou√©e: donn√©es manquantes');\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Email et mot de passe temporaire requis'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // R√©cup√©rer la demande approuv√©e\r\n    console.log('üîç Recherche de la demande pour:', email);\r\n    const accountRequest = await accountRequestService.getByEmail(email);\r\n    \r\n    console.log('üìä Demande trouv√©e:', {\r\n      found: !!accountRequest,\r\n      id: accountRequest?.id,\r\n      status: accountRequest?.status,\r\n      isFirstLogin: accountRequest?.isFirstLogin,\r\n      hasTemporaryPassword: !!accountRequest?.temporaryPassword,\r\n      temporaryPasswordMatch: accountRequest?.temporaryPassword === temporaryPassword\r\n    });\r\n    \r\n    if (!accountRequest) {\r\n      console.log('‚ùå Aucune demande trouv√©e pour cet email');\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Aucune demande trouv√©e pour cet email'\r\n      }, { status: 404 });\r\n    }\r\n\r\n    if (!accountRequest.id) {\r\n      console.error('‚ùå ID de demande manquant:', accountRequest);\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Erreur interne: ID de demande manquant'\r\n      }, { status: 500 });\r\n    }\r\n    \r\n    if (accountRequest.status !== 'approved') {\r\n      console.log('‚ùå Demande non approuv√©e, statut:', accountRequest.status);\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Demande non approuv√©e par un administrateur'\r\n      }, { status: 404 });\r\n    }\r\n\r\n    // V√©rifier le mot de passe temporaire\r\n    if (accountRequest.temporaryPassword !== temporaryPassword) {\r\n      console.log('‚ùå Mot de passe temporaire invalide');\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Mot de passe temporaire invalide'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    // Si c'est la premi√®re connexion, un nouveau mot de passe est requis\r\n    // Par d√©faut, on consid√®re que c'est toujours la premi√®re connexion si isFirstLogin n'est pas d√©fini\r\n    const isFirstLogin = accountRequest.isFirstLogin !== false; // true si undefined ou true\r\n    \r\n    console.log('üîç √âtat de premi√®re connexion:', { isFirstLogin, hasNewPassword: !!newPassword });\r\n    \r\n    if (isFirstLogin) {\r\n      if (!newPassword || newPassword.length < 6) {\r\n        console.log('‚ùå Nouveau mot de passe requis ou trop court');\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Un nouveau mot de passe d\\'au moins 6 caract√®res est requis'\r\n        }, { status: 400 });\r\n      }\r\n\r\n      // V√©rifier si un utilisateur existe d√©j√† (√©viter doublons)\r\n      console.log('üîç V√©rification utilisateur existant...');\r\n      const existingUser = await userService.getByEmail(email);\r\n      if (existingUser) {\r\n        console.log('‚ö†Ô∏è Utilisateur d√©j√† cr√©√©, marquer demande comme utilis√©e');\r\n        // L'utilisateur existe d√©j√†, marquer la demande comme utilis√©e\r\n        await accountRequestService.update(accountRequest.id, {\r\n          isFirstLogin: false,\r\n          temporaryPassword: undefined // Supprimer le mot de passe temporaire\r\n        });\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          message: 'Compte d√©j√† cr√©√©. Connectez-vous avec vos identifiants.',\r\n          user: {\r\n            id: existingUser.id,\r\n            email: existingUser.email,\r\n            nom: existingUser.nom,\r\n            prenom: existingUser.prenom\r\n          }\r\n        });\r\n      }\r\n\r\n      console.log('‚úÖ Cr√©ation du nouveau compte utilisateur');\r\n      // Cr√©er l'utilisateur avec le nouveau mot de passe\r\n      const userData = {\r\n        nom: 'Utilisateur',\r\n        prenom: 'Nouveau',\r\n        email: email,\r\n        tel: '00000000',\r\n        password: newPassword,\r\n        date_de_naissance: '1990-01-01',\r\n        sexe: 'Masculin' as const,\r\n        pays: 'Togo',\r\n        ville: 'Lom√©',\r\n        quartier: '',\r\n        region: '',\r\n        codePays: '+228'\r\n      };\r\n\r\n      const userId = await userService.create(userData);\r\n      console.log('‚úÖ Utilisateur cr√©√© avec ID:', userId);\r\n\r\n      // Marquer la demande comme utilis√©e (premi√®re connexion termin√©e)\r\n      console.log('üîÑ Mise √† jour de la demande ID:', accountRequest.id);\r\n      await accountRequestService.update(accountRequest.id, {\r\n        isFirstLogin: false,\r\n        temporaryPassword: undefined // Supprimer le mot de passe temporaire\r\n      });\r\n      console.log('‚úÖ Demande mise √† jour avec succ√®s');\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Compte cr√©√© avec succ√®s. Vous pouvez maintenant vous connecter avec votre nouveau mot de passe.',\r\n        userId,\r\n        requiresProfileCompletion: true\r\n      });\r\n    } else {\r\n      console.log('üîç Connexion existante - recherche utilisateur');\r\n      // Si ce n'est pas la premi√®re connexion, authentifier normalement\r\n      const user = await userService.getByEmail(email);\r\n      if (!user) {\r\n        console.log('‚ùå Utilisateur introuvable');\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Utilisateur introuvable'\r\n        }, { status: 404 });\r\n      }\r\n\r\n      console.log('‚úÖ Utilisateur trouv√©');\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Connexion r√©ussie',\r\n        user: {\r\n          id: user.id,\r\n          email: user.email,\r\n          nom: user.nom,\r\n          prenom: user.prenom\r\n        }\r\n      });\r\n    }\r\n\r\n  } catch (error: any) {\r\n    console.error('‚ùå Erreur connexion temporaire:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Erreur lors de la connexion'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n"
    }
  ],
  "updatedFiles": [
    {
      "path": "components/auth/CoGestionnaireLoginForm.tsx",
      "originalContent": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { \r\n  FiMail, \r\n  FiLock, \r\n  FiArrowRight, \r\n  FiArrowLeft, \r\n  FiEye, \r\n  FiEyeOff,\r\n  FiShield,\r\n  FiUser,\r\n  FiAlertCircle\r\n} from 'react-icons/fi';\r\nimport { useApi } from '../../lib/api';\r\n\r\ninterface CoGestionnaireLoginFormProps {\r\n  onSuccess: (data: {\r\n    coGestionnaire: any;\r\n    proprietaireId: string;\r\n    authToken: string;\r\n    requiresPasswordChange: boolean;\r\n  }) => void;\r\n  onError?: (error: string) => void;\r\n}\r\n\r\nexport function CoGestionnaireLoginForm({ onSuccess, onError }: CoGestionnaireLoginFormProps) {\r\n  const [step, setStep] = useState<'email' | 'password'>('email');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState<{\r\n    email?: string;\r\n    password?: string;\r\n    general?: string;\r\n  }>({});\r\n  \r\n  const { apiFetch } = useApi();\r\n\r\n  const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const handleEmailSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    // Validation de l'email\r\n    if (!email.trim()) {\r\n      setErrors({ email: 'L\\'email est requis' });\r\n      return;\r\n    }\r\n    \r\n    if (!validateEmail(email)) {\r\n      setErrors({ email: 'Format d\\'email invalide' });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setErrors({});\r\n\r\n    try {\r\n      // V√©rifier que l'email existe dans le syst√®me\r\n      const response = await apiFetch('/api/co-gestionnaires/check-email', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ email })\r\n      });\r\n\r\n      if (response.exists) {\r\n        setStep('password');\r\n      } else {\r\n        setErrors({ \r\n          email: 'Aucun co-gestionnaire trouv√© avec cet email. V√©rifiez votre adresse email ou contactez l\\'administrateur.' \r\n        });\r\n      }\r\n    } catch (error: any) {\r\n      setErrors({ \r\n        email: error.message || 'Erreur lors de la v√©rification de l\\'email' \r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    // Validation du mot de passe\r\n    if (!password.trim()) {\r\n      setErrors({ password: 'Le mot de passe est requis' });\r\n      return;\r\n    }\r\n\r\n    if (password.length < 6) {\r\n      setErrors({ password: 'Le mot de passe doit contenir au moins 6 caract√®res' });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setErrors({});\r\n\r\n    try {\r\n      const response = await apiFetch('/api/auth/co-gestionnaire-login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      if (response.success) {\r\n        onSuccess({\r\n          coGestionnaire: response.coGestionnaire,\r\n          proprietaireId: response.proprietaireId,\r\n          authToken: response.authToken,\r\n          requiresPasswordChange: response.requiresPasswordChange\r\n        });\r\n      }\r\n    } catch (error: any) {\r\n      const errorMessage = error.message || 'Erreur lors de la connexion';\r\n      \r\n      // Analyser le type d'erreur pour donner un message sp√©cifique\r\n      if (errorMessage.includes('Mot de passe incorrect') || errorMessage.includes('password')) {\r\n        setErrors({ \r\n          password: 'Mot de passe incorrect. V√©rifiez votre mot de passe ou contactez l\\'administrateur pour le r√©initialiser.' \r\n        });\r\n      } else if (errorMessage.includes('inactif') || errorMessage.includes('suspendu')) {\r\n        setErrors({ \r\n          general: 'Votre compte est inactif ou suspendu. Contactez l\\'administrateur pour r√©activer votre acc√®s.' \r\n        });\r\n      } else if (errorMessage.includes('non trouv√©')) {\r\n        setErrors({ \r\n          general: 'Co-gestionnaire non trouv√©. Contactez l\\'administrateur.' \r\n        });\r\n      } else {\r\n        setErrors({ \r\n          password: errorMessage \r\n        });\r\n      }\r\n      \r\n      if (onError) {\r\n        onError(errorMessage);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleBackToEmail = () => {\r\n    setStep('email');\r\n    setPassword('');\r\n    setErrors({});\r\n  };\r\n\r\n  const clearEmailError = () => {\r\n    if (errors.email) {\r\n      setErrors(prev => ({ ...prev, email: undefined }));\r\n    }\r\n  };\r\n\r\n  const clearPasswordError = () => {\r\n    if (errors.password) {\r\n      setErrors(prev => ({ ...prev, password: undefined }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md mx-auto\">\r\n      {/* Header avec progression */}\r\n      <div className=\"text-center mb-8\">\r\n        <div className=\"w-16 h-16 bg-[#f01919] rounded-full flex items-center justify-center mx-auto mb-4\">\r\n          {step === 'email' ? (\r\n            <FiMail className=\"w-8 h-8 text-white\" />\r\n          ) : (\r\n            <FiLock className=\"w-8 h-8 text-white\" />\r\n          )}\r\n        </div>\r\n        \r\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\r\n          Connexion Co-gestionnaire\r\n        </h1>\r\n        \r\n        <div className=\"flex items-center justify-center space-x-2 mb-4\">\r\n          <div className={`w-8 h-1 rounded-full transition-colors ${\r\n            step === 'email' ? 'bg-[#f01919]' : 'bg-green-500'\r\n          }`}></div>\r\n          <div className={`w-8 h-1 rounded-full transition-colors ${\r\n            step === 'password' ? 'bg-[#f01919]' : 'bg-gray-300'\r\n          }`}></div>\r\n        </div>\r\n        \r\n        <p className=\"text-gray-600\">\r\n          {step === 'email' \r\n            ? 'Entrez votre adresse email pour commencer' \r\n            : `Mot de passe pour ${email}`\r\n          }\r\n        </p>\r\n      </div>\r\n\r\n      {/* Erreur g√©n√©rale */}\r\n      {errors.general && (\r\n        <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n          <div className=\"flex items-start\">\r\n            <FiAlertCircle className=\"w-5 h-5 text-red-600 mt-0.5 mr-3 flex-shrink-0\" />\r\n            <div>\r\n              <h3 className=\"text-sm font-medium text-red-800 mb-1\">\r\n                Erreur de connexion\r\n              </h3>\r\n              <p className=\"text-sm text-red-700\">\r\n                {errors.general}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* √âtape 1: Email */}\r\n      {step === 'email' && (\r\n        <form onSubmit={handleEmailSubmit} className=\"space-y-6\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Adresse email *\r\n            </label>\r\n            <div className=\"relative\">\r\n              <FiMail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\r\n              <Input\r\n                type=\"email\"\r\n                value={email}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setEmail(e.target.value);\r\n                  clearEmailError();\r\n                }}\r\n                placeholder=\"votre.email@entreprise.com\"\r\n                className={`pl-12 h-12 text-lg ${errors.email ? 'border-red-500 focus:ring-red-500' : ''}`}\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n              />\r\n            </div>\r\n            {errors.email && (\r\n              <div className=\"mt-2 p-3 bg-red-50 border border-red-200 rounded-lg\">\r\n                <p className=\"text-red-600 text-sm flex items-start\">\r\n                  <FiAlertCircle className=\"w-4 h-4 mt-0.5 mr-2 flex-shrink-0\" />\r\n                  {errors.email}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={loading || !email.trim()}\r\n            className=\"w-full h-12 bg-[#f01919] hover:bg-[#d01515] text-white text-lg font-medium\"\r\n          >\r\n            {loading ? (\r\n              <div className=\"flex items-center\">\r\n                <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-3\"></div>\r\n                V√©rification...\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex items-center justify-center\">\r\n                Continuer\r\n                <FiArrowRight className=\"w-5 h-5 ml-2\" />\r\n              </div>\r\n            )}\r\n          </Button>\r\n\r\n          <div className=\"text-center\">\r\n            <p className=\"text-sm text-gray-600\">\r\n              Vous √™tes un utilisateur principal ?{' '}\r\n              <a href=\"/auth\" className=\"text-[#f01919] hover:text-[#d01515] font-medium\">\r\n                Connexion principale\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </form>\r\n      )}\r\n\r\n      {/* √âtape 2: Mot de passe */}\r\n      {step === 'password' && (\r\n        <form onSubmit={handlePasswordSubmit} className=\"space-y-6\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Mot de passe *\r\n            </label>\r\n            <div className=\"relative\">\r\n              <FiLock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\r\n              <Input\r\n                type={showPassword ? 'text' : 'password'}\r\n                value={password}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setPassword(e.target.value);\r\n                  clearPasswordError();\r\n                }}\r\n                placeholder=\"Votre mot de passe\"\r\n                className={`pl-12 pr-12 h-12 text-lg ${errors.password ? 'border-red-500 focus:ring-red-500' : ''}`}\r\n                autoComplete=\"current-password\"\r\n                autoFocus\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => setShowPassword(!showPassword)}\r\n                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n              >\r\n                {showPassword ? (\r\n                  <FiEyeOff className=\"w-5 h-5\" />\r\n                ) : (\r\n                  <FiEye className=\"w-5 h-5\" />\r\n                )}\r\n              </button>\r\n            </div>\r\n            {errors.password && (\r\n              <div className=\"mt-2 p-3 bg-red-50 border border-red-200 rounded-lg\">\r\n                <p className=\"text-red-600 text-sm flex items-start\">\r\n                  <FiAlertCircle className=\"w-4 h-4 mt-0.5 mr-2 flex-shrink-0\" />\r\n                  {errors.password}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"flex space-x-3\">\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              onClick={handleBackToEmail}\r\n              disabled={loading}\r\n              className=\"flex-1 h-12 text-lg\"\r\n            >\r\n              <FiArrowLeft className=\"w-5 h-5 mr-2\" />\r\n              Retour\r\n            </Button>\r\n            \r\n            <Button\r\n              type=\"submit\"\r\n              disabled={loading || !password.trim()}\r\n              className=\"flex-2 h-12 bg-[#f01919] hover:bg-[#d01515] text-white text-lg font-medium\"\r\n            >\r\n              {loading ? (\r\n                <div className=\"flex items-center\">\r\n                  <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-3\"></div>\r\n                  Connexion...\r\n                </div>\r\n              ) : (\r\n                <div className=\"flex items-center justify-center\">\r\n                  <FiShield className=\"w-5 h-5 mr-2\" />\r\n                  Se connecter\r\n                </div>\r\n              )}\r\n            </Button>\r\n          </div>\r\n\r\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\r\n            <div className=\"flex items-start\">\r\n              <FiUser className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3\" />\r\n              <div>\r\n                <h4 className=\"text-sm font-medium text-blue-800 mb-1\">\r\n                  Connexion en tant que co-gestionnaire\r\n                </h4>\r\n                <p className=\"text-sm text-blue-700\">\r\n                  Vous acc√©dez au tableau de bord avec vos permissions de co-gestionnaire.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
    },
    {
      "path": "components/auth/CoGestionnaireAuth.tsx",
      "originalContent": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { ArrowLeft, Users, Mail, Lock, Eye, EyeOff, ArrowRight, Shield, AlertCircle, CheckCircle } from 'lucide-react';\r\n\r\ninterface CoGestionnaireAuthProps {\r\n  onBack: () => void;\r\n}\r\n\r\nexport const CoGestionnaireAuth: React.FC<CoGestionnaireAuthProps> = ({ onBack }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const router = useRouter();\r\n\r\n  // Connexion directe avec email et mot de passe en une seule √©tape\r\n  const handleLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!email.trim()) {\r\n      setError('Veuillez entrer votre adresse email');\r\n      return;\r\n    }\r\n\r\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n      setError('Format d\\'email invalide');\r\n      return;\r\n    }\r\n\r\n    if (!password.trim()) {\r\n      setError('Veuillez entrer votre mot de passe');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Authentifier directement avec email + mot de passe\r\n      const response = await fetch('/api/auth/co-gestionnaire', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 404) {\r\n          setError('Aucun co-gestionnaire trouv√© avec cet email. V√©rifiez que vous avez √©t√© invit√©(e) par un animateur.');\r\n        } else if (response.status === 401) {\r\n          setError('Mot de passe incorrect. V√©rifiez vos identifiants.');\r\n        } else {\r\n          setError(data.details || data.error || 'Erreur de connexion');\r\n        }\r\n        return;\r\n      }\r\n\r\n      console.log('‚úÖ Connexion co-gestionnaire r√©ussie');\r\n\r\n      // Utiliser le token personnalis√© pour s'authentifier via Firebase\r\n      const { signInWithCustomToken } = await import('firebase/auth');\r\n      const { auth: firebaseAuth } = await import('../../app/firebase/config');\r\n      \r\n      await signInWithCustomToken(firebaseAuth, data.data.token);\r\n\r\n      // Stocker les informations du co-gestionnaire ET le r√¥le s√©lectionn√©\r\n      if (typeof window !== 'undefined') {\r\n        localStorage.setItem('coGestionnaireInfo', JSON.stringify(data.data.user));\r\n        localStorage.setItem('userRole', 'cogestionnaire'); // IMPORTANT: Stocker le r√¥le\r\n        localStorage.setItem('selectedRole', 'cogestionnaire'); // Pour la coh√©rence\r\n      }\r\n\r\n      console.log('‚úÖ Token Firebase configur√© pour co-gestionnaire');\r\n\r\n      // Rediriger vers le dashboard\r\n      router.push('/dashboard');\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Erreur connexion co-gestionnaire:', error);\r\n      setError(error instanceof Error ? error.message : 'Erreur de connexion');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-600 via-slate-700 to-slate-800 flex items-center justify-center p-4\">\r\n      <div className=\"w-full max-w-md\">\r\n        {/* Header avec retour */}\r\n        <div className=\"flex items-center justify-between mb-8\">\r\n          <button\r\n            onClick={onBack}\r\n            className=\"flex items-center gap-2 text-white/80 hover:text-white transition-colors\"\r\n          >\r\n            <ArrowLeft className=\"w-5 h-5\" />\r\n            <span>Changer de r√¥le</span>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Mode Indicator */}\r\n        <div className=\"text-center mb-8\">\r\n          <div className=\"inline-flex items-center gap-2 bg-white/20 text-white px-4 py-2 rounded-full mb-4\">\r\n            <Users className=\"w-5 h-5\" />\r\n            <span className=\"font-semibold\">Mode Co-gestionnaire</span>\r\n          </div>\r\n          <h1 className=\"text-3xl font-bold text-white mb-2\">\r\n            Connexion Co-gestionnaire\r\n          </h1>\r\n          <p className=\"text-white/90\">\r\n            Saisissez vos identifiants pour acc√©der au dashboard\r\n          </p>\r\n        </div>\r\n\r\n        {/* Card */}\r\n        <div className=\"bg-white/95 backdrop-blur-md rounded-2xl shadow-xl p-8\">\r\n          {/* Security Badge */}\r\n          <div className=\"flex items-center justify-center gap-2 bg-blue-50 text-blue-700 px-4 py-2 rounded-lg mb-6\">\r\n            <Shield className=\"w-4 h-4\" />\r\n            <span className=\"text-sm font-medium\">üîê Connexion unique - Email et mot de passe ensemble</span>\r\n          </div>\r\n\r\n          {/* Error Message */}\r\n          {error && (\r\n            <div className=\"bg-amber-50 border border-amber-200 text-amber-800 px-4 py-3 rounded-lg mb-6 flex items-start gap-2\">\r\n              <AlertCircle className=\"w-5 h-5 flex-shrink-0 mt-0.5\" />\r\n              <p className=\"text-sm\">{error}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Formulaire unique avec email et mot de passe */}\r\n          <form onSubmit={handleLogin} className=\"space-y-6\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                <Mail className=\"w-4 h-4 inline mr-2\" />\r\n                üìß Adresse email\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n                placeholder=\"votre.email@exemple.com\"\r\n                disabled={loading}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                <Lock className=\"w-4 h-4 inline mr-2\" />\r\n                üîí Mot de passe\r\n              </label>\r\n              <div className=\"relative\">\r\n                <input\r\n                  type={showPassword ? 'text' : 'password'}\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors pr-12\"\r\n                  placeholder=\"Votre mot de passe\"\r\n                  disabled={loading}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => setShowPassword(!showPassword)}\r\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 transition-colors\"\r\n                  disabled={loading}\r\n                >\r\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              disabled={loading}\r\n              className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-medium hover:from-blue-700 hover:to-indigo-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all flex items-center justify-center gap-2\"\r\n            >\r\n              {loading ? (\r\n                <>\r\n                  <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\r\n                  Connexion en cours...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  Se connecter\r\n                  <ArrowRight className=\"w-5 h-5\" />\r\n                </>\r\n              )}\r\n            </button>\r\n          </form>\r\n\r\n          {/* Info */}\r\n          <div className=\"mt-6 pt-6 border-t border-gray-200\">\r\n            <p className=\"text-center text-sm text-gray-600\">\r\n              Vous avez besoin d'aide ? <br />\r\n              Contactez l'animateur pour vos permissions d'acc√®s.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"
    }
  ]
}