'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '../../../../components/ui/button';
import { Input } from '../../../../components/ui/input';
import { Textarea } from '../../../../components/ui/textarea';
import { useApi } from '../../../../lib/api';
import { useAuth } from '../../../../contexts/AuthContext';
import { useMediaUpload } from '../../../../hooks/useMediaUpload';
import { ContenuDashboard } from '../../../models/contenu';
import { 
  FiFileText, 
  FiImage,
  FiVideo,
  FiMusic,
  FiX,
  FiEdit3,
  FiTrash2,
  FiPlus,
  FiRefreshCw,
  FiEye,
  FiHeart,
  FiShare2,
  FiCalendar,
  FiAlertTriangle,
  FiUpload,
  FiCheck,
  FiSettings
} from 'react-icons/fi';

interface ContenuExtended extends ContenuDashboard {
  displayTitle?: string;
  displayDescription?: string;
  displayStatus?: 'published' | 'draft' | 'scheduled';
  laalaName?: string;
}

const contentTypes = [
  { id: 'image', name: 'Image', icon: FiImage, color: 'bg-green-100 text-green-800' },
  { id: 'video', name: 'Vid√©o', icon: FiVideo, color: 'bg-red-100 text-red-800' }
];

export default function ContentPage() {
  const [contents, setContents] = useState<ContenuExtended[]>([]);
  const [laalas, setLaalas] = useState<any[]>([]);
  const [selectedTab, setSelectedTab] = useState<'contents'>('contents');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<string>('all');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedContent, setSelectedContent] = useState<ContenuExtended | null>(null);
  const [loading, setLoading] = useState(true);
  const [loadingLaalas, setLoadingLaalas] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Formulaire de cr√©ation
  const [newContent, setNewContent] = useState({
    nom: '',
    description: '',
    type: 'image',
    src: '',
    idLaala: '',
    allowComment: true
  });

  const { apiFetch } = useApi();
  const { user } = useAuth();

  // Hook pour l'upload de m√©dias
  const mediaUpload = useMediaUpload({
    category: 'contenu-media',
    userId: user?.uid,
    onSuccess: (result) => {
      setNewContent(prev => ({ ...prev, src: result.url }));
      console.log('‚úÖ M√©dia upload√©:', result.url);
    },
    onError: (error) => {
      setError(`Erreur upload: ${error}`);
      console.error('‚ùå Erreur upload m√©dia:', error);
    }
  });

  // R√©cup√©ration des laalas depuis l'API
  const fetchLaalas = async () => {
    try {
      setLoadingLaalas(true);
      
      if (!user) {
        console.log('üë§ Utilisateur non connect√©, arr√™t du chargement des laalas');
        setLoadingLaalas(false);
        return;
      }
      
      console.log('üîç R√©cup√©ration des laalas pour utilisateur:', user.uid);
      const laalasData = await apiFetch('/api/laalas');
      
      if (!Array.isArray(laalasData)) {
        console.warn('‚ö†Ô∏è R√©ponse API inattendue pour laalas:', laalasData);
        setLaalas([]);
        return;
      }
      
      setLaalas(laalasData);
      console.log('‚úÖ Laalas r√©cup√©r√©s:', laalasData.length);
      
      // S√©lectionner automatiquement le premier laala s'il y en a un
      if (laalasData.length > 0 && !newContent.idLaala) {
        setNewContent(prev => ({ ...prev, idLaala: laalasData[0].id }));
      }
      
    } catch (err) {
      console.error('‚ùå Erreur r√©cup√©ration laalas:', err);
      setLaalas([]);
    } finally {
      setLoadingLaalas(false);
    }
  };

  // Gestion de l'upload de fichier
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // V√©rifier le type de fichier
    const isImage = file.type.startsWith('image/');
    const isVideo = file.type.startsWith('video/');
    
    if (!isImage && !isVideo) {
      setError('Seuls les fichiers image et vid√©o sont accept√©s');
      return;
    }

    // Mettre √† jour le type selon le fichier
    setNewContent(prev => ({ 
      ...prev, 
      type: isImage ? 'image' : 'video' 
    }));

    // Lancer l'upload
    await mediaUpload.upload(file);
  };

  // R√©cup√©ration des contenus depuis l'API
  const fetchContents = async () => {
    try {
      setLoading(true);
      setError(null);
      
      if (!user) {
        console.log('üë§ Utilisateur non connect√©, arr√™t du chargement');
        setLoading(false);
        return;
      }
      
      console.log('üîç R√©cup√©ration des contenus pour utilisateur:', user.uid);
      const contentsData = await apiFetch('/api/contenus');
      
      if (!Array.isArray(contentsData)) {
        console.warn('‚ö†Ô∏è R√©ponse API inattendue:', contentsData);
        setContents([]);
        return;
      }
      
      // Transformer les contenus pour l'affichage
      const transformedContents: ContenuExtended[] = contentsData.map((content: ContenuDashboard) => {
        const laala = laalas.find(l => l.id === content.idLaala);
        return {
          ...content,
          displayTitle: content.nom || 'Contenu sans titre',
          displayDescription: content.nom || 'Aucune description', // utiliser nom comme description
          displayStatus: content.allowComment ? 'published' : 'draft', // utiliser allowComment comme indicateur de statut
          laalaName: laala?.nom || 'Laala inconnu'
        };
      });
      
      setContents(transformedContents);
      console.log('‚úÖ Contenus r√©cup√©r√©s:', transformedContents.length);
      
    } catch (err) {
      console.error('‚ùå Erreur r√©cup√©ration contenus:', err);
      setError(`Erreur lors du chargement des contenus: ${err instanceof Error ? err.message : 'Erreur inconnue'}`);
      setContents([]);
    } finally {
      setLoading(false);
    }
  };

  // Cr√©ation d'un nouveau contenu
  const createContent = async () => {
    try {
      setLoading(true);
      setError(null);
      
      if (!newContent.nom.trim()) {
        setError('Le nom du contenu est requis');
        return;
      }

      if (!newContent.src.trim()) {
        setError('Vous devez uploader un fichier m√©dia');
        return;
      }

      if (!newContent.idLaala) {
        setError('Vous devez s√©lectionner un laala pour ce contenu');
        return;
      }
      
      const contentData = {
        nom: newContent.nom,
        description: newContent.description,
        type: newContent.type,
        src: newContent.src,
        idLaala: newContent.idLaala,
        allowComment: newContent.allowComment,
        personnes: [],
        idCreateur: user?.uid || 'anonymous',
        dateCreation: new Date().toISOString(),
        statut: 'publi√©',
        vues: 0,
        likes: 0,
        commentaires: 0
      };
      
      await apiFetch('/api/contenus', {
        method: 'POST',
        body: JSON.stringify(contentData)
      });
      
      console.log('‚úÖ Contenu cr√©√© avec succ√®s');
      
      // R√©initialiser le formulaire
      setNewContent({
        nom: '',
        description: '',
        type: 'image',
        src: '',
        idLaala: laalas.length > 0 ? laalas[0].id : '',
        allowComment: true
      });
      
      setShowCreateModal(false);
      await fetchContents();
      
    } catch (err) {
      console.error('‚ùå Erreur cr√©ation contenu:', err);
      setError('Erreur lors de la cr√©ation du contenu');
    } finally {
      setLoading(false);
    }
  };

  // Suppression d'un contenu
  const deleteContent = async (id: string) => {
    if (!confirm('√ätes-vous s√ªr de vouloir supprimer ce contenu ?')) {
      return;
    }
    
    try {
      await apiFetch(`/api/contenus/${id}`, {
        method: 'DELETE'
      });
      
      console.log('‚úÖ Contenu supprim√©:', id);
      await fetchContents();
      
    } catch (err) {
      console.error('‚ùå Erreur suppression contenu:', err);
      setError('Erreur lors de la suppression');
    }
  };

  // Fonction pour voir les d√©tails d'un contenu (READ)
  const viewContentDetails = (content: ContenuExtended) => {
    console.log('üìñ Lecture contenu:', content.nom);
    setSelectedContent(content);
    setShowDetailModal(true);
  };

  // Fonction pour modifier un contenu (UPDATE)
  const editContent = (content: ContenuExtended) => {
    console.log('‚úèÔ∏è Modification contenu:', content.nom);
    setSelectedContent(content);
    
    // Pr√©-remplir le formulaire avec les donn√©es du contenu
    setNewContent({
      nom: content.nom || '',
      description: '', // Le mod√®le n'a pas de description, donc on laisse vide
      type: content.type || 'image',
      src: content.src || '',
      idLaala: content.idLaala || '',
      allowComment: content.allowComment !== false
    });
    
    setShowEditModal(true);
  };

  // Mise √† jour d'un contenu existant
  const updateContent = async () => {
    if (!selectedContent) return;
    
    try {
      setLoading(true);
      setError(null);
      
      if (!newContent.nom.trim() || !newContent.description.trim() || !newContent.idLaala) {
        setError('Le nom, la description et le laala sont requis');
        return;
      }
      
      const contentData = {
        nom: newContent.nom,
        description: newContent.description,
        type: newContent.type,
        src: newContent.src,
        idLaala: newContent.idLaala,
        allowComment: newContent.allowComment,
        dateModification: new Date().toISOString()
      };
      
      await apiFetch(`/api/contenus/${selectedContent.id}`, {
        method: 'PUT',
        body: JSON.stringify(contentData)
      });
      
      console.log('‚úÖ Contenu mis √† jour avec succ√®s');
      
      // R√©initialiser les √©tats
      setSelectedContent(null);
      setShowEditModal(false);
      
      // R√©initialiser le formulaire
      setNewContent({
        nom: '',
        description: '',
        type: 'image',
        src: '',
        idLaala: '',
        allowComment: true
      });
      
      await fetchContents();
      
    } catch (err) {
      console.error('‚ùå Erreur mise √† jour contenu:', err);
      setError('Erreur lors de la mise √† jour du contenu');
    } finally {
      setLoading(false);
    }
  };

  // Ouverture du modal avec v√©rification des laalas
  const handleOpenCreateModal = async () => {
    await fetchLaalas();
    if (laalas.length === 0) {
      setError('Vous devez d\'abord cr√©er un laala avant de pouvoir cr√©er du contenu');
      return;
    }
    setShowCreateModal(true);
  };

  // Chargement initial
  useEffect(() => {
    if (user) {
      fetchLaalas().then(() => {
        fetchContents();
      });
    }
  }, [user]);

  const filteredContents = contents.filter(content => {
    const matchesSearch = content.displayTitle?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         content.displayDescription?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = filterType === 'all' || content.type === filterType;
    return matchesSearch && matchesType;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'published': return 'bg-green-100 text-green-800';
      case 'draft': return 'bg-yellow-100 text-yellow-800';
      case 'scheduled': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'published': return 'Publi√©';
      case 'draft': return 'Brouillon';
      case 'scheduled': return 'Programm√©';
      default: return status;
    }
  };

  const getTypeInfo = (type: string) => {
    return contentTypes.find(t => t.id === type) || contentTypes[0];
  };

  // Stats calculations
  const totalPublished = contents.filter(c => c.displayStatus === 'published').length;
  const totalViews = contents.reduce((sum, c) => sum + (c.vues || 0), 0);
  const totalLikes = contents.reduce((sum, c) => sum + (c.likes || 0), 0);
  const totalComments = contents.reduce((sum, c) => sum + (Array.isArray(c.commentaires) ? c.commentaires.length : 0), 0);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Mes Contenus</h1>
          <p className="text-gray-600 mt-1">
            G√©rez vos publications et cr√©ations
          </p>
        </div>
        <Button 
          onClick={handleOpenCreateModal}
          className="bg-[#f01919] hover:bg-[#d01515] text-white"
          disabled={laalas.length === 0}
        >
          <FiPlus className="w-4 h-4 mr-2" />
          Nouveau Contenu
        </Button>
      </div>

      {/* Alerte si aucun laala */}
      {laalas.length === 0 && !loadingLaalas && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="flex items-center">
            <FiAlertTriangle className="w-5 h-5 text-yellow-400 mr-2" />
            <div>
              <p className="text-yellow-800 font-medium">Aucun laala disponible</p>
              <p className="text-yellow-700 text-sm mt-1">
                Vous devez d'abord cr√©er un laala avant de pouvoir cr√©er du contenu. 
                <a href="/dashboard/laalas" className="underline ml-1">Cr√©er un laala</a>
              </p>
            </div>
          </div>
        </div>
      )}

      <>
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Contenus Publi√©s</p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">{totalPublished}</p>
                  <p className="text-sm text-green-600 mt-1">En ligne</p>
                </div>
                <div className="p-3 rounded-lg bg-[#f01919]">
                  <FiFileText className="w-6 h-6 text-white" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Vues Totales</p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">{totalViews.toLocaleString()}</p>
                  <p className="text-sm text-blue-600 mt-1">Audience</p>
                </div>
                <div className="p-3 rounded-lg bg-blue-500">
                  <FiEye className="w-6 h-6 text-white" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Likes</p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">{totalLikes.toLocaleString()}</p>
                  <p className="text-sm text-pink-600 mt-1">Engagement</p>
                </div>
                <div className="p-3 rounded-lg bg-pink-500">
                  <FiHeart className="w-6 h-6 text-white" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Commentaires</p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">{totalComments.toLocaleString()}</p>
                  <p className="text-sm text-purple-600 mt-1">Interactions</p>
                </div>
                <div className="p-3 rounded-lg bg-purple-500">
                  <FiShare2 className="w-6 h-6 text-white" />
                </div>
              </div>
            </div>
          </div>

          {/* Filters et Actions */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <Input
                  placeholder="Rechercher un contenu..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
              <div>
                <select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#f01919]"
                >
                  <option value="all">Tous les types</option>
                  {contentTypes.map(type => (
                    <option key={type.id} value={type.id}>{type.name}</option>
                  ))}
                </select>
              </div>
              <div>
                <Button 
                  onClick={fetchContents} 
                  variant="outline" 
                  className="w-full"
                  disabled={loading}
                >
                  <FiRefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                  Actualiser
                </Button>
              </div>
              <div>
                <Button 
                  onClick={handleOpenCreateModal}
                  className="w-full bg-[#f01919] hover:bg-[#d01515] text-white"
                  disabled={laalas.length === 0}
                >
                  <FiPlus className="w-4 h-4 mr-2" />
                  Nouveau
                </Button>
              </div>
            </div>
          </div>

          {/* Messages d'erreur */}
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-center">
                <FiX className="w-5 h-5 text-red-400 mr-2" />
                <p className="text-red-800">{error}</p>
              </div>
            </div>
          )}

          {/* √âtat de chargement */}
          {loading && (
            <div className="text-center py-8">
              <FiRefreshCw className="w-8 h-8 text-gray-400 mx-auto mb-2 animate-spin" />
              <p className="text-gray-600">Chargement des contenus...</p>
            </div>
          )}

          {/* Contents List */}
          {!loading && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredContents.map((content) => {
                const typeInfo = getTypeInfo(content.type || 'texte');
                const IconComponent = typeInfo.icon;
                
                return (
                  <div key={content.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <IconComponent className="w-5 h-5 text-gray-500" />
                          <h3 className="text-lg font-semibold text-gray-900">
                            {content.displayTitle}
                          </h3>
                          <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(content.displayStatus || 'draft')}`}>
                            {getStatusLabel(content.displayStatus || 'draft')}
                          </span>
                        </div>
                        <p className="text-sm text-gray-600 mb-2">
                          {content.displayDescription}
                        </p>
                        <p className="text-xs text-gray-500 mb-3">
                          üìç Laala: {content.laalaName}
                        </p>
                        <div className="flex items-center space-x-4 text-sm text-gray-500 mb-3">
                          <span className="flex items-center">
                            <FiEye className="w-4 h-4 mr-1" />
                            {content.vues || 0}
                          </span>
                          <span className="flex items-center">
                            <FiHeart className="w-4 h-4 mr-1" />
                            {content.likes || 0}
                          </span>
                          <span className="flex items-center">
                            <FiShare2 className="w-4 h-4 mr-1" />
                            {content.commentaires || 0}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${typeInfo.color}`}>
                        {typeInfo.name}
                      </span>
                      <div className="flex space-x-2">
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => viewContentDetails(content)}
                          className="text-blue-600 hover:text-blue-700"
                        >
                          <FiEye className="w-4 h-4" />
                        </Button>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => editContent(content)}
                        >
                          <FiEdit3 className="w-4 h-4" />
                        </Button>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => deleteContent(content.id!)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <FiTrash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {/* √âtat vide */}
          {!loading && filteredContents.length === 0 && (
            <div className="text-center py-12">
              <FiFileText className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {searchTerm || filterType !== 'all' 
                  ? 'Aucun contenu trouv√©' 
                  : 'Aucun contenu'
                }
              </h3>
              <p className="text-gray-600 mb-4">
                {searchTerm || filterType !== 'all'
                  ? 'Aucun contenu ne correspond √† vos crit√®res de recherche.'
                  : laalas.length === 0 
                    ? 'Vous devez d\'abord cr√©er un laala avant de pouvoir cr√©er du contenu.'
                    : 'Vous n\'avez pas encore cr√©√© de contenus. Cr√©ez votre premi√®re publication.'
                }
              </p>
              {!searchTerm && filterType === 'all' && laalas.length > 0 && (
                <Button 
                  onClick={handleOpenCreateModal}
                  className="bg-[#f01919] hover:bg-[#d01515] text-white"
                >
                  <FiPlus className="w-4 h-4 mr-2" />
                  Cr√©er votre premier contenu
                </Button>
              )}
              {laalas.length === 0 && (
                <Button 
                  onClick={() => window.location.href = '/dashboard/laalas'}
                  className="bg-[#f01919] hover:bg-[#d01515] text-white"
                >
                  <FiPlus className="w-4 h-4 mr-2" />
                  Cr√©er votre premier laala
                </Button>
              )}
            </div>
          )}
        </>

      {/* Modal de cr√©ation moderne */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-gradient-to-br from-blue-50/90 via-indigo-50/90 to-purple-50/90 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl p-0 w-full max-w-3xl max-h-[90vh] overflow-hidden">
            {/* Header moderne */}
            <div className="bg-gradient-to-r from-[#f01919] to-[#d01515] px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="p-2 bg-white bg-opacity-20 rounded-lg">
                    <FiFileText className="w-5 h-5 text-white" />
                  </div>
                  <div>
                    <h2 className="text-xl font-bold text-white">Nouveau Contenu</h2>
                    <p className="text-red-100 text-sm">Cr√©ez et partagez votre contenu</p>
                  </div>
                </div>
                <Button 
                  variant="ghost" 
                  size="sm"
                  onClick={() => setShowCreateModal(false)}
                  className="text-white hover:bg-white hover:bg-opacity-20 hover:text-white"
                >
                  <FiX className="w-5 h-5" />
                </Button>
              </div>
            </div>

            {/* Contenu du formulaire */}
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-80px)]">
              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 flex items-start space-x-3">
                  <FiAlertTriangle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="text-red-800 font-medium">Erreur</h4>
                    <p className="text-red-700 text-sm mt-1">{error}</p>
                  </div>
                </div>
              )}

              <form onSubmit={(e) => { e.preventDefault(); createContent(); }} className="space-y-6">
                {/* Informations de base */}
                <div className="bg-gray-50 rounded-xl p-6 space-y-4">
                  <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                    <FiSettings className="w-5 h-5 mr-2 text-[#f01919]" />
                    Informations de base
                  </h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="md:col-span-2">
                      <label htmlFor="idLaala" className="block text-sm font-medium text-gray-700 mb-2">
                        Laala associ√© <span className="text-red-500">*</span>
                      </label>
                      <select
                        id="idLaala"
                        value={newContent.idLaala}
                        onChange={(e) => setNewContent(prev => ({ ...prev, idLaala: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#f01919] focus:border-[#f01919] transition-all duration-200"
                        required
                      >
                        <option value="">S√©lectionner un laala</option>
                        {laalas.map(laala => (
                          <option key={laala.id} value={laala.id}>
                            {laala.nom} ({laala.categorie})
                          </option>
                        ))}
                </select>
                <p className="text-xs text-gray-500 mt-1">
                  Le contenu sera publi√© dans ce laala
                </p>
              </div>

              <div>
                <label htmlFor="nom" className="block text-sm font-medium text-gray-700 mb-1">
                  Titre du contenu <span className="text-red-500">*</span>
                </label>
                <Input
                  id="nom"
                  type="text"
                  value={newContent.nom}
                  onChange={(e) => setNewContent(prev => ({ ...prev, nom: e.target.value }))}
                  placeholder="Ex: Mon article"
                  required
                />
              </div>

              <div>
                <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <Textarea
                  id="description"
                  value={newContent.description}
                  onChange={(e) => setNewContent(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="D√©crivez votre contenu..."
                  rows={3}
                />
              </div>

              <div>
                <label htmlFor="type" className="block text-sm font-medium text-gray-700 mb-1">
                  Type de contenu
                </label>
                <select
                  id="type"
                  value={newContent.type}
                  onChange={(e) => setNewContent(prev => ({ ...prev, type: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#f01919]"
                >
                  {contentTypes.map(type => (
                    <option key={type.id} value={type.id}>{type.name}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Fichier m√©dia <span className="text-red-500">*</span>
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors">
                  {mediaUpload.isUploading ? (
                    <div className="space-y-3">
                      <FiUpload className="w-8 h-8 text-blue-500 mx-auto animate-pulse" />
                      <p className="text-sm text-gray-600">Upload en cours... {mediaUpload.progress}%</p>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-500 h-2 rounded-full transition-all duration-300" 
                          style={{ width: `${mediaUpload.progress}%` }}
                        ></div>
                      </div>
                    </div>
                  ) : newContent.src ? (
                    <div className="space-y-3">
                      <FiCheck className="w-8 h-8 text-green-500 mx-auto" />
                      <p className="text-sm text-green-600">Fichier upload√© avec succ√®s</p>
                      {newContent.type === 'image' ? (
                        <img src={newContent.src} alt="Preview" className="max-w-32 h-auto mx-auto rounded" />
                      ) : (
                        <video src={newContent.src} className="max-w-32 h-auto mx-auto rounded" muted />
                      )}
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setNewContent(prev => ({ ...prev, src: '' }));
                          mediaUpload.reset();
                        }}
                      >
                        Changer le fichier
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      <FiUpload className="w-8 h-8 text-gray-400 mx-auto" />
                      <div>
                        <label className="cursor-pointer">
                          <span className="text-sm text-gray-600">
                            Cliquez pour s√©lectionner un fichier ou
                          </span>
                          <br />
                          <span className="text-sm text-blue-600 hover:text-blue-800">
                            glissez-d√©posez ici
                          </span>
                          <input
                            type="file"
                            className="hidden"
                            accept="image/*,video/*"
                            onChange={handleFileUpload}
                          />
                        </label>
                      </div>
                      <p className="text-xs text-gray-500">
                        Formats support√©s: JPG, PNG, GIF, MP4, MOV, AVI
                      </p>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="allowComment"
                  checked={newContent.allowComment}
                  onChange={(e) => setNewContent(prev => ({ ...prev, allowComment: e.target.checked }))}
                  className="rounded border-gray-300 text-[#f01919] focus:ring-[#f01919]"
                />
                <label htmlFor="allowComment" className="text-sm text-gray-700">
                  Autoriser les commentaires
                </label>
              </div>

              <div className="bg-blue-50 p-3 rounded-lg">
                <p className="text-sm text-blue-800">
                  <FiFileText className="w-4 h-4 inline mr-1" />
                  Votre contenu sera publi√© dans le laala s√©lectionn√© et visible par votre communaut√©.
                </p>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <Button 
                  type="button"
                  variant="outline" 
                  onClick={() => setShowCreateModal(false)}
                  disabled={loading}
                >
                  Annuler
                </Button>
                <Button 
                  type="submit"
                  className="bg-[#f01919] hover:bg-[#d01515] text-white"
                  disabled={loading || !newContent.nom.trim() || !newContent.idLaala}
                >
                  {loading ? (
                    <>
                      <FiRefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      Cr√©ation...
                    </>
                  ) : (
                    <>
                      <FiPlus className="w-4 h-4 mr-2" />
                      Publier
                    </>
                  )}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal de d√©tail */}
      {showDetailModal && selectedContent && (
        <div className="fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl border border-gray-200 p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-xl font-bold text-gray-900">D√©tails du contenu</h2>
                <p className="text-gray-600 text-sm mt-1">Informations compl√®tes sur ce contenu</p>
              </div>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setShowDetailModal(false)}
              >
                <FiX className="w-4 h-4" />
              </Button>
            </div>

            <div className="space-y-4">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">{selectedContent.nom}</h3>
                <p className="text-gray-600">{selectedContent.displayDescription || 'Aucune description'}</p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-700">Type</label>
                  <p className="text-gray-900">{getTypeInfo(selectedContent.type || 'texte').name}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700">Laala</label>
                  <p className="text-gray-900">{selectedContent.laalaName}</p>
                </div>
              </div>

              {selectedContent.src && (selectedContent.type === 'image' || selectedContent.type === 'video') && (
                <div>
                  <label className="text-sm font-medium text-gray-700">M√©dias</label>
                  {selectedContent.type === 'image' ? (
                    <div className="mt-2">
                      <img 
                        src={selectedContent.src} 
                        alt={selectedContent.nom} 
                        className="w-full max-w-md h-auto rounded-lg border"
                      />
                    </div>
                  ) : selectedContent.type === 'video' ? (
                    <div className="mt-2">
                      <video 
                        src={selectedContent.src} 
                        controls
                        className="w-full max-w-md h-auto rounded-lg border"
                      />
                    </div>
                  ) : null}
                </div>
              )}

              <div className="grid grid-cols-3 gap-4 pt-4 border-t">
                <div className="text-center">
                  <FiEye className="w-6 h-6 text-gray-500 mx-auto mb-1" />
                  <p className="text-lg font-semibold text-gray-900">{selectedContent.vues || 0}</p>
                  <p className="text-xs text-gray-500">Vues</p>
                </div>
                <div className="text-center">
                  <FiHeart className="w-6 h-6 text-gray-500 mx-auto mb-1" />
                  <p className="text-lg font-semibold text-gray-900">{selectedContent.likes || 0}</p>
                  <p className="text-xs text-gray-500">Likes</p>
                </div>
                <div className="text-center">
                  <FiShare2 className="w-6 h-6 text-gray-500 mx-auto mb-1" />
                  <p className="text-lg font-semibold text-gray-900">{selectedContent.commentaires || 0}</p>
                  <p className="text-xs text-gray-500">Commentaires</p>
                </div>
              </div>
            </div>

            <div className="flex justify-end space-x-3 pt-6 border-t">
              <Button 
                variant="outline"
                onClick={() => {
                  setShowDetailModal(false);
                  editContent(selectedContent);
                }}
              >
                <FiEdit3 className="w-4 h-4 mr-2" />
                Modifier
              </Button>
              <Button 
                variant="outline"
                onClick={() => setShowDetailModal(false)}
              >
                Fermer
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Modal d'√©dition */}
      {showEditModal && selectedContent && (
        <div className="fixed inset-0 bg-black/10 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl border border-gray-200 p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-xl font-bold text-gray-900">Modifier le contenu</h2>
                <p className="text-gray-600 text-sm mt-1">Modifiez les informations de ce contenu</p>
              </div>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setShowEditModal(false)}
              >
                <FiX className="w-4 h-4" />
              </Button>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-4">
                <p className="text-red-800 text-sm">{error}</p>
              </div>
            )}

            <form onSubmit={(e) => { e.preventDefault(); updateContent(); }} className="space-y-4">
              <div>
                <label htmlFor="edit-nom" className="block text-sm font-medium text-gray-700 mb-1">
                  Titre <span className="text-red-500">*</span>
                </label>
                <Input
                  id="edit-nom"
                  value={newContent.nom}
                  onChange={(e) => setNewContent(prev => ({ ...prev, nom: e.target.value }))}
                  placeholder="Titre du contenu"
                />
              </div>

              <div>
                <label htmlFor="edit-description" className="block text-sm font-medium text-gray-700 mb-1">
                  Description <span className="text-red-500">*</span>
                </label>
                <Textarea
                  id="edit-description"
                  value={newContent.description}
                  onChange={(e) => setNewContent(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Description du contenu"
                  rows={3}
                />
              </div>

              <div>
                <label htmlFor="edit-idLaala" className="block text-sm font-medium text-gray-700 mb-1">
                  Laala associ√© <span className="text-red-500">*</span>
                </label>
                <select
                  id="edit-idLaala"
                  value={newContent.idLaala}
                  onChange={(e) => setNewContent(prev => ({ ...prev, idLaala: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#f01919]"
                >
                  <option value="">S√©lectionner un laala</option>
                  {laalas.map(laala => (
                    <option key={laala.id} value={laala.id}>{laala.nom || laala.name}</option>
                  ))}
                </select>
              </div>

              <div>
                <label htmlFor="edit-type" className="block text-sm font-medium text-gray-700 mb-1">
                  Type
                </label>
                <select
                  id="edit-type"
                  value={newContent.type}
                  onChange={(e) => setNewContent(prev => ({ ...prev, type: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#f01919]"
                >
                  {contentTypes.map(type => (
                    <option key={type.id} value={type.id}>{type.name}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Fichier m√©dia
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 transition-colors">
                  {mediaUpload.isUploading ? (
                    <div className="space-y-3">
                      <FiUpload className="w-6 h-6 text-blue-500 mx-auto animate-pulse" />
                      <p className="text-sm text-gray-600">Upload en cours... {mediaUpload.progress}%</p>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-500 h-2 rounded-full transition-all duration-300" 
                          style={{ width: `${mediaUpload.progress}%` }}
                        ></div>
                      </div>
                    </div>
                  ) : newContent.src ? (
                    <div className="space-y-3">
                      <FiCheck className="w-6 h-6 text-green-500 mx-auto" />
                      <p className="text-sm text-green-600">Fichier upload√©</p>
                      {newContent.type === 'image' ? (
                        <img src={newContent.src} alt="Preview" className="max-w-24 h-auto mx-auto rounded" />
                      ) : (
                        <video src={newContent.src} className="max-w-24 h-auto mx-auto rounded" muted />
                      )}
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setNewContent(prev => ({ ...prev, src: '' }));
                          mediaUpload.reset();
                        }}
                      >
                        Changer
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-2">
                      <FiUpload className="w-6 h-6 text-gray-400 mx-auto" />
                      <label className="cursor-pointer block">
                        <span className="text-sm text-blue-600 hover:text-blue-800">
                          Choisir un nouveau fichier
                        </span>
                        <input
                          type="file"
                          className="hidden"
                          accept="image/*,video/*"
                          onChange={handleFileUpload}
                        />
                      </label>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="edit-allowComment"
                  checked={newContent.allowComment}
                  onChange={(e) => setNewContent(prev => ({ ...prev, allowComment: e.target.checked }))}
                  className="rounded border-gray-300 text-[#f01919] focus:ring-[#f01919]"
                />
                <label htmlFor="edit-allowComment" className="text-sm text-gray-700">
                  Autoriser les commentaires
                </label>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <Button 
                  type="button"
                  variant="outline" 
                  onClick={() => setShowEditModal(false)}
                  disabled={loading}
                >
                  Annuler
                </Button>
                <Button 
                  type="submit"
                  className="bg-[#f01919] hover:bg-[#d01515] text-white"
                  disabled={loading || !newContent.nom.trim() || !newContent.description.trim() || !newContent.idLaala}
                >
                  {loading ? (
                    <>
                      <FiRefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      Mise √† jour...
                    </>
                  ) : (
                    <>
                      <FiEdit3 className="w-4 h-4 mr-2" />
                      Mettre √† jour
                    </>
                  )}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}