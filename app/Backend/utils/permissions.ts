// ===== SYST√àME DE PERMISSIONS =====
// Gestion des autorisations pour les op√©rations CRUD

export interface PermissionContext {
  userId: string;
  operation: 'create' | 'read' | 'update' | 'delete';
  resource: string;
  resourceId?: string;
  resourceData?: any;
}

export interface PermissionResult {
  allowed: boolean;
  reason?: string;
}

// Configuration des permissions par d√©faut (tr√®s permissive pour le d√©veloppement)
export const DEFAULT_PERMISSIONS = {
  // Autorisations par d√©faut pour chaque op√©ration
  create: true,
  read: true,
  update: true,
  delete: true,
  
  // Autorisations sp√©cifiques par ressource
  contenus: {
    create: true,
    read: true,
    update: true, // L'utilisateur peut modifier ses propres contenus
    delete: true  // L'utilisateur peut supprimer ses propres contenus
  },
  
  laalas: {
    create: true,
    read: true,
    update: true,
    delete: true
  },
  
  messages: {
    create: true,
    read: true,
    update: true,
    delete: true
  },
  
  boutiques: {
    create: true,
    read: true,
    update: true,
    delete: true
  },
  
  retraits: {
    create: true,
    read: true,
    update: true,
    delete: true
  },
  
  users: {
    create: true,
    read: true,
    update: true, // L'utilisateur peut modifier son propre profil
    delete: false // Pas de suppression d'utilisateurs par d√©faut
  }
};

// Fonction principale de v√©rification des permissions
export function checkPermission(context: PermissionContext): PermissionResult {
  console.log('üîê V√©rification permission:', context);
  
  // Pour le d√©veloppement, on autorise tout par d√©faut
  if (process.env.NODE_ENV === 'development') {
    console.log('üîì Mode d√©veloppement - Permission accord√©e');
    return { allowed: true, reason: 'Mode d√©veloppement' };
  }
  
  // V√©rifier les permissions g√©n√©rales
  const generalPermission = DEFAULT_PERMISSIONS[context.operation];
  if (!generalPermission) {
    return { 
      allowed: false, 
      reason: `Op√©ration ${context.operation} non autoris√©e par d√©faut` 
    };
  }
  
  // V√©rifier les permissions sp√©cifiques √† la ressource
  const resourcePermissions = DEFAULT_PERMISSIONS[context.resource as keyof typeof DEFAULT_PERMISSIONS];
  if (resourcePermissions && typeof resourcePermissions === 'object') {
    const specificPermission = resourcePermissions[context.operation];
    if (specificPermission === false) {
      return { 
        allowed: false, 
        reason: `Op√©ration ${context.operation} non autoris√©e pour ${context.resource}` 
      };
    }
  }
  
  // V√©rifications sp√©cifiques selon l'op√©ration
  switch (context.operation) {
    case 'update':
    case 'delete':
      return checkOwnershipPermission(context);
    
    case 'create':
    case 'read':
    default:
      return { allowed: true, reason: 'Permission accord√©e' };
  }
}

// V√©rification de propri√©t√© pour les op√©rations sensibles
function checkOwnershipPermission(context: PermissionContext): PermissionResult {
  // Si pas de donn√©es de ressource, on autorise (sera v√©rifi√© au niveau du service)
  if (!context.resourceData) {
    console.log('‚ö†Ô∏è Pas de donn√©es de ressource - Permission accord√©e par d√©faut');
    return { allowed: true, reason: 'V√©rification de propri√©t√© diff√©r√©e' };
  }
  
  // V√©rifier si l'utilisateur est le propri√©taire
  const isOwner = context.resourceData.idCreateur === context.userId ||
                  context.resourceData.idProprietaire === context.userId ||
                  context.resourceData.idExpediteur === context.userId ||
                  context.resourceData.id === context.userId;
  
  if (isOwner) {
    return { allowed: true, reason: 'Propri√©taire de la ressource' };
  }
  
  // Pour le d√©veloppement, on autorise m√™me si pas propri√©taire
  if (process.env.NODE_ENV === 'development') {
    console.log('üîì Mode d√©veloppement - Permission accord√©e malgr√© non-propri√©t√©');
    return { allowed: true, reason: 'Mode d√©veloppement - non-propri√©taire autoris√©' };
  }
  
  return { 
    allowed: false, 
    reason: 'Vous n\'√™tes pas autoris√© √† modifier cette ressource' 
  };
}

// Middleware de permissions pour les APIs
export function createPermissionMiddleware(resource: string) {
  return function checkApiPermission(
    userId: string,
    operation: 'create' | 'read' | 'update' | 'delete',
    resourceId?: string,
    resourceData?: any
  ): PermissionResult {
    return checkPermission({
      userId,
      operation,
      resource,
      resourceId,
      resourceData
    });
  };
}

// Fonctions utilitaires pour les permissions sp√©cifiques
export const PermissionUtils = {
  // V√©rifier si l'utilisateur peut cr√©er une ressource
  canCreate: (userId: string, resource: string): boolean => {
    return checkPermission({
      userId,
      operation: 'create',
      resource
    }).allowed;
  },
  
  // V√©rifier si l'utilisateur peut lire une ressource
  canRead: (userId: string, resource: string, resourceData?: any): boolean => {
    return checkPermission({
      userId,
      operation: 'read',
      resource,
      resourceData
    }).allowed;
  },
  
  // V√©rifier si l'utilisateur peut modifier une ressource
  canUpdate: (userId: string, resource: string, resourceData: any): boolean => {
    return checkPermission({
      userId,
      operation: 'update',
      resource,
      resourceData
    }).allowed;
  },
  
  // V√©rifier si l'utilisateur peut supprimer une ressource
  canDelete: (userId: string, resource: string, resourceData: any): boolean => {
    return checkPermission({
      userId,
      operation: 'delete',
      resource,
      resourceData
    }).allowed;
  }
};

// Configuration des permissions par r√¥le (pour usage futur)
export const ROLE_PERMISSIONS = {
  admin: {
    '*': ['create', 'read', 'update', 'delete']
  },
  
  user: {
    contenus: ['create', 'read', 'update', 'delete'],
    laalas: ['create', 'read', 'update', 'delete'],
    messages: ['create', 'read', 'update', 'delete'],
    boutiques: ['create', 'read', 'update', 'delete'],
    retraits: ['create', 'read', 'update', 'delete'],
    users: ['read', 'update'] // Pas de cr√©ation/suppression d'utilisateurs
  },
  
  guest: {
    contenus: ['read'],
    laalas: ['read'],
    boutiques: ['read']
  }
};

// Fonction pour obtenir le r√¥le d'un utilisateur (simplifi√© pour le moment)
export function getUserRole(userId: string): string {
  // Pour le moment, tous les utilisateurs authentifi√©s sont des "user"
  return userId ? 'user' : 'guest';
}

// V√©rification des permissions bas√©e sur les r√¥les
export function checkRolePermission(
  userId: string,
  resource: string,
  operation: string
): PermissionResult {
  const userRole = getUserRole(userId);
  const rolePermissions = ROLE_PERMISSIONS[userRole as keyof typeof ROLE_PERMISSIONS];
  
  if (!rolePermissions) {
    return { allowed: false, reason: 'R√¥le non reconnu' };
  }
  
  // V√©rifier les permissions globales (admin)
  if (rolePermissions['*'] && rolePermissions['*'].includes(operation)) {
    return { allowed: true, reason: 'Permission globale accord√©e' };
  }
  
  // V√©rifier les permissions sp√©cifiques √† la ressource
  const resourcePermissions = rolePermissions[resource as keyof typeof rolePermissions];
  if (resourcePermissions && resourcePermissions.includes(operation)) {
    return { allowed: true, reason: 'Permission sp√©cifique accord√©e' };
  }
  
  return { 
    allowed: false, 
    reason: `R√¥le ${userRole} non autoris√© pour ${operation} sur ${resource}` 
  };
}