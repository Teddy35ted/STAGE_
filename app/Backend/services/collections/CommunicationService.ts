import { BaseService } from '../base/BaseService';
import { PublicCommunication } from '../../../models/communication';
import { COLLECTIONS, dbUtils } from '../../config/database';
import { ServiceError } from '../../utils/errors';
import { Timestamp } from 'firebase-admin/firestore';

export class CommunicationService extends BaseService<PublicCommunication> {
  constructor() {
    super(COLLECTIONS.COMMUNICATIONS);
  }

  // Convertir un timestamp Firestore en nombre
  private convertTimestamp(timestamp: any): number {
    if (timestamp && typeof timestamp.toMillis === 'function') {
      return timestamp.toMillis();
    }
    if (typeof timestamp === 'number') {
      return timestamp;
    }
    if (typeof timestamp === 'string') {
      return new Date(timestamp).getTime();
    }
    return Date.now();
  }

  async create(data: Partial<PublicCommunication>, userId?: string): Promise<string> {
    try {
      console.log('üìù Cr√©ation communication avec donn√©es:', data);
      
      // Enlever l'ID s'il existe dans les donn√©es (Firestore le g√©n√©rera)
      const { id: _, ...cleanData } = data as any;
      
      const communicationData = {
        ...cleanData,
        authorId: userId || cleanData.authorId,
        createdAt: dbUtils.timestamp(),
        updatedAt: dbUtils.timestamp(),
        stats: {
          views: 0,
          likes: 0,
          shares: 0,
          comments: 0
        }
      };
      
      console.log('üìÑ Donn√©es compl√®tes pour cr√©ation communication:', communicationData);
      
      // Cr√©er directement dans Firestore
      const docRef = await this.collection.add(communicationData);
      const firestoreId = docRef.id;
      
      console.log('‚úÖ Communication cr√©√©e avec ID Firestore:', firestoreId);
      return firestoreId;
      
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation communication:', error);
      throw new ServiceError('Impossible de cr√©er la communication', 'CREATION_ERROR', error instanceof Error ? error.message : String(error));
    }
  }

  async getAll(): Promise<PublicCommunication[]> {
    try {
      console.log('üîç R√©cup√©ration de toutes les communications...');
      
      const snapshot = await this.collection
        .orderBy('createdAt', 'desc')
        .get();
      
      if (snapshot.empty) {
        console.log('üì≠ Aucune communication trouv√©e');
        return [];
      }
      
      const communications: PublicCommunication[] = [];
      
      snapshot.forEach(doc => {
        const data = doc.data();
        const communication: PublicCommunication = {
          id: doc.id,
          ...data,
          createdAt: this.convertTimestamp(data.createdAt),
          updatedAt: this.convertTimestamp(data.updatedAt)
        } as PublicCommunication;
        
        communications.push(communication);
      });
      
      console.log(`‚úÖ ${communications.length} communications r√©cup√©r√©es`);
      return communications;
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration communications:', error);
      throw new ServiceError('Impossible de r√©cup√©rer les communications', 'FETCH_ERROR', error instanceof Error ? error.message : String(error));
    }
  }

  async getByAuthor(authorId: string): Promise<PublicCommunication[]> {
    try {
      console.log('üîç R√©cup√©ration communications pour auteur:', authorId);
      
      const snapshot = await this.collection
        .where('authorId', '==', authorId)
        .orderBy('createdAt', 'desc')
        .get();
      
      if (snapshot.empty) {
        console.log('üì≠ Aucune communication trouv√©e pour cet auteur');
        return [];
      }
      
      const communications: PublicCommunication[] = [];
      
      snapshot.forEach(doc => {
        const data = doc.data();
        const communication: PublicCommunication = {
          id: doc.id,
          ...data,
          createdAt: this.convertTimestamp(data.createdAt),
          updatedAt: this.convertTimestamp(data.updatedAt)
        } as PublicCommunication;
        
        communications.push(communication);
      });
      
      console.log(`‚úÖ ${communications.length} communications trouv√©es pour l'auteur`);
      return communications;
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration communications par auteur:', error);
      throw new ServiceError('Impossible de r√©cup√©rer les communications de l\'auteur', 'FETCH_ERROR', error instanceof Error ? error.message : String(error));
    }
  }

  async getByStatus(status: PublicCommunication['status']): Promise<PublicCommunication[]> {
    try {
      console.log('üîç R√©cup√©ration communications avec statut:', status);
      
      const snapshot = await this.collection
        .where('status', '==', status)
        .orderBy('createdAt', 'desc')
        .get();
      
      if (snapshot.empty) {
        console.log('üì≠ Aucune communication trouv√©e avec ce statut');
        return [];
      }
      
      const communications: PublicCommunication[] = [];
      
      snapshot.forEach(doc => {
        const data = doc.data();
        const communication: PublicCommunication = {
          id: doc.id,
          ...data,
          createdAt: this.convertTimestamp(data.createdAt),
          updatedAt: this.convertTimestamp(data.updatedAt)
        } as PublicCommunication;
        
        communications.push(communication);
      });
      
      console.log(`‚úÖ ${communications.length} communications trouv√©es avec le statut ${status}`);
      return communications;
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration communications par statut:', error);
      throw new ServiceError('Impossible de r√©cup√©rer les communications par statut', 'FETCH_ERROR', error instanceof Error ? error.message : String(error));
    }
  }

  async update(id: string, data: Partial<PublicCommunication>, userId?: string): Promise<void> {
    try {
      console.log('üìù Mise √† jour communication:', id, data);
      
      const updateData = {
        ...data,
        updatedAt: dbUtils.timestamp()
      };
      
      // Enlever l'ID des donn√©es √† mettre √† jour
      delete (updateData as any).id;
      
      await this.collection.doc(id).update(updateData);
      console.log('‚úÖ Communication mise √† jour avec succ√®s');
      
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour communication:', error);
      throw new ServiceError('Impossible de mettre √† jour la communication', 'UPDATE_ERROR', error instanceof Error ? error.message : String(error));
    }
  }

  async delete(id: string, userId?: string): Promise<void> {
    try {
      console.log('üóëÔ∏è Suppression communication:', id);
      
      await this.collection.doc(id).delete();
      console.log('‚úÖ Communication supprim√©e avec succ√®s');
      
    } catch (error) {
      console.error('‚ùå Erreur suppression communication:', error);
      throw new ServiceError('Impossible de supprimer la communication', 'DELETE_ERROR', error instanceof Error ? error.message : String(error));
    }
  }
}