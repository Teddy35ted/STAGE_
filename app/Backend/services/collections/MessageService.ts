import { BaseService } from '../base/BaseService';
import { ValidationMessageT } from '../../../models/message';
import { COLLECTIONS, dbUtils } from '../../config/database';
import { ServiceError } from '../../utils/errors';

export class MessageService extends BaseService<ValidationMessageT> {
  constructor() {
    super(COLLECTIONS.MESSAGES || 'messages');
  }

  async create(data: Partial<ValidationMessageT>): Promise<string> {
    try {
      console.log('üìù Cr√©ation message avec donn√©es:', data);
      
      // Enlever l'ID s'il existe dans les donn√©es (Firestore le g√©n√©rera)
      const { id: _, ...cleanData } = data as any;
      
      const messageData = {
        ...cleanData,
        createdAt: dbUtils.timestamp(),
        updatedAt: dbUtils.timestamp(),
      };
      
      console.log('üìÑ Donn√©es compl√®tes pour cr√©ation message:', messageData);
      
      // Cr√©er directement dans Firestore
      const docRef = await this.collection.add(messageData);
      const firestoreId = docRef.id;
      
      console.log('‚úÖ Message cr√©√© avec ID Firestore:', firestoreId);
      
      return firestoreId;
      
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation message:', error);
      throw new ServiceError('Erreur lors de la cr√©ation du message', error);
    }
  }

  async getById(id: string): Promise<ValidationMessageT | null> {
    try {
      console.log(`üìñ R√©cup√©ration message ID:`, id);
      
      if (!id || id.trim() === '') {
        console.warn('‚ö†Ô∏è ID vide pour r√©cup√©ration message');
        return null;
      }
      
      const doc = await this.collection.doc(id).get();
      
      if (!doc.exists) {
        console.log(`‚ùå Message ${id} non trouv√©`);
        return null;
      }
      
      const data = doc.data();
      if (!data) {
        console.log(`‚ùå Donn√©es vides pour message ${id}`);
        return null;
      }
      
      // S'assurer que l'ID Firestore est utilis√©
      const result: ValidationMessageT = {
        ...data,
        id: doc.id // Utiliser l'ID Firestore
      } as ValidationMessageT;
      
      console.log(`‚úÖ Message r√©cup√©r√©:`, result.contenu || 'Message', 'ID:', result.id);
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå Erreur r√©cup√©ration message ${id}:`, error);
      throw new ServiceError(`Erreur lors de la r√©cup√©ration du message ${id}`, error);
    }
  }

  async getAll(options: any = {}): Promise<ValidationMessageT[]> {
    try {
      console.log('üìã R√©cup√©ration de tous les messages...');
      
      let query = this.collection;
      
      if (options.orderBy) {
        query = query.orderBy(options.orderBy, options.orderDirection || 'asc') as any;
      }
      
      if (options.limit) {
        query = query.limit(options.limit) as any;
      }
      
      const snapshot = await query.get();
      
      const messages = snapshot.docs.map(doc => {
        const data = doc.data();
        return {
          ...data,
          id: doc.id // S'assurer que l'ID Firestore est utilis√©
        } as ValidationMessageT;
      });
      
      console.log(`‚úÖ ${messages.length} messages r√©cup√©r√©s`);
      
      // V√©rifier que tous les messages ont un ID
      const messagesWithIds = messages.filter(m => m.id);
      if (messagesWithIds.length !== messages.length) {
        console.warn(`‚ö†Ô∏è ${messages.length - messagesWithIds.length} messages sans ID d√©tect√©s`);
      }
      
      return messages;
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration tous messages:', error);
      throw new ServiceError('Erreur lors de la r√©cup√©ration des messages', error);
    }
  }

  async update(id: string, data: Partial<ValidationMessageT>): Promise<void> {
    try {
      console.log(`‚úèÔ∏è Mise √† jour message ID:`, id);
      console.log(`üìù Donn√©es de mise √† jour:`, data);
      
      if (!id || id.trim() === '') {
        throw new ServiceError('ID vide pour mise √† jour message');
      }
      
      // V√©rifier que le message existe
      const existingDoc = await this.collection.doc(id).get();
      if (!existingDoc.exists) {
        throw new ServiceError(`Message ${id} non trouv√© pour mise √† jour`);
      }
      
      // Nettoyer les donn√©es (enlever les champs non modifiables)
      const { id: _, createdAt, ...cleanData } = data as any;
      
      const updateData = {
        ...cleanData,
        updatedAt: dbUtils.timestamp(),
      };
      
      await this.collection.doc(id).update(updateData);
      console.log(`‚úÖ Message ${id} mis √† jour avec succ√®s`);
      
    } catch (error) {
      console.error(`‚ùå Erreur mise √† jour message ${id}:`, error);
      throw new ServiceError(`Erreur lors de la mise √† jour du message ${id}`, error);
    }
  }

  async delete(id: string): Promise<void> {
    try {
      console.log(`üóëÔ∏è Suppression message ID:`, id);
      
      if (!id || id.trim() === '') {
        throw new ServiceError('ID vide pour suppression message');
      }
      
      // V√©rifier que le message existe
      const existingDoc = await this.collection.doc(id).get();
      if (!existingDoc.exists) {
        console.warn(`‚ö†Ô∏è Message ${id} d√©j√† supprim√© ou inexistant`);
        return; // Ne pas lever d'erreur si d√©j√† supprim√©
      }
      
      const existingData = existingDoc.data();
      console.log(`üìã Message √† supprimer:`, existingData?.contenu || 'Sans contenu');
      
      await this.collection.doc(id).delete();
      console.log(`‚úÖ Message ${id} supprim√© avec succ√®s`);
      
      // V√©rifier que la suppression a bien eu lieu
      const deletedDoc = await this.collection.doc(id).get();
      if (deletedDoc.exists) {
        throw new ServiceError(`√âchec de la suppression du message ${id}`);
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur suppression message ${id}:`, error);
      throw new ServiceError(`Erreur lors de la suppression du message ${id}`, error);
    }
  }

  async getConversation(senderId: string, receiverId: string): Promise<ValidationMessageT | null> {
    try {
      console.log('üí¨ R√©cup√©ration conversation entre:', senderId, 'et', receiverId);
      
      const results = await this.query([
        { field: 'chateurs', operator: 'array-contains', value: senderId }
      ]);
      
      const conversation = results.find(conv => conv.chateurs?.includes(receiverId)) || null;
      
      console.log(`‚úÖ Conversation ${conversation ? 'trouv√©e' : 'non trouv√©e'}`);
      
      return conversation;
      
    } catch (error) {
      console.error(`‚ùå Erreur r√©cup√©ration conversation:`, error);
      throw new ServiceError('Erreur lors de la r√©cup√©ration de la conversation', error);
    }
  }

  async getMessagesByUser(userId: string): Promise<ValidationMessageT[]> {
    try {
      console.log('üìã R√©cup√©ration messages pour utilisateur:', userId);
      
      const query = this.collection
        .where('idExpediteur', '==', userId)
        .orderBy('createdAt', 'desc');
      
      const snapshot = await query.get();
      
      const messages = snapshot.docs.map(doc => {
        const data = doc.data();
        return {
          ...data,
          id: doc.id // S'assurer que l'ID Firestore est utilis√©
        } as ValidationMessageT;
      });
      
      console.log(`‚úÖ ${messages.length} messages trouv√©s pour utilisateur ${userId}`);
      
      return messages;
      
    } catch (error) {
      console.error(`‚ùå Erreur r√©cup√©ration messages utilisateur ${userId}:`, error);
      throw new ServiceError(`Erreur lors de la r√©cup√©ration des messages de l'utilisateur ${userId}`, error);
    }
  }
}
