import { BaseService } from '../base/BaseService';
import { ContenuDashboard, ContenuCore, generateContenuAutoFields } from '../../../models/contenu';
import { COLLECTIONS, adminDb, dbUtils } from '../../config/database';
import { ServiceError } from '../../utils/errors';

export class ContenuService extends BaseService<ContenuDashboard> {
  constructor() {
    super(COLLECTIONS.CONTENUS || 'contenus');
  }

  async createContenu(
    contenuCore: ContenuCore,
    creatorInfo: { nom: string; avatar: string; iscert: boolean },
    position: number = 1
  ): Promise<string> {
    try {
      console.log('üìù Cr√©ation contenu avec donn√©es:', contenuCore);
      
      // G√©n√©rer les champs automatiques SANS l'ID (Firestore le g√©n√©rera)
      const autoFields = generateContenuAutoFields(contenuCore, creatorInfo, position);
      
      // Enlever l'ID g√©n√©r√© automatiquement car Firestore va cr√©er le sien
      const { id: _, ...autoFieldsWithoutId } = autoFields;
      
      const completeContenu = {
        ...contenuCore,
        ...autoFieldsWithoutId,
        createdAt: dbUtils.timestamp(),
        updatedAt: dbUtils.timestamp(),
      };
      
      console.log('üìÑ Donn√©es compl√®tes pour cr√©ation:', completeContenu);
      
      // Cr√©er directement dans Firestore
      const docRef = await this.collection.add(completeContenu);
      const firestoreId = docRef.id;
      
      console.log('‚úÖ Contenu cr√©√© avec ID Firestore:', firestoreId);
      
      return firestoreId;
      
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation contenu:', error);
      throw new ServiceError('Erreur lors de la cr√©ation du contenu', error);
    }
  }

  async getById(id: string): Promise<ContenuDashboard | null> {
    try {
      console.log(`üìñ R√©cup√©ration contenu ID:`, id);
      
      if (!id || id.trim() === '') {
        console.warn('‚ö†Ô∏è ID vide pour r√©cup√©ration contenu');
        return null;
      }
      
      const doc = await this.collection.doc(id).get();
      
      if (!doc.exists) {
        console.log(`‚ùå Contenu ${id} non trouv√©`);
        return null;
      }
      
      const data = doc.data();
      if (!data) {
        console.log(`‚ùå Donn√©es vides pour contenu ${id}`);
        return null;
      }
      
      // S'assurer que l'ID Firestore est utilis√©
      const result: ContenuDashboard = {
        ...data,
        id: doc.id // Utiliser l'ID Firestore
      } as ContenuDashboard;
      
      console.log(`‚úÖ Contenu r√©cup√©r√©:`, result.nom, 'ID:', result.id);
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå Erreur r√©cup√©ration contenu ${id}:`, error);
      throw new ServiceError(`Erreur lors de la r√©cup√©ration du contenu ${id}`, error);
    }
  }

  async getAll(options: any = {}): Promise<ContenuDashboard[]> {
    try {
      console.log('üìã R√©cup√©ration de tous les contenus...');
      
      let query = this.collection;
      
      if (options.orderBy) {
        query = query.orderBy(options.orderBy, options.orderDirection || 'asc') as any;
      }
      
      if (options.limit) {
        query = query.limit(options.limit) as any;
      }
      
      const snapshot = await query.get();
      
      const contenus = snapshot.docs.map(doc => {
        const data = doc.data();
        return {
          ...data,
          id: doc.id // S'assurer que l'ID Firestore est utilis√©
        } as ContenuDashboard;
      });
      
      console.log(`‚úÖ ${contenus.length} contenus r√©cup√©r√©s`);
      
      // V√©rifier que tous les contenus ont un ID
      const contenusWithIds = contenus.filter(c => c.id);
      if (contenusWithIds.length !== contenus.length) {
        console.warn(`‚ö†Ô∏è ${contenus.length - contenusWithIds.length} contenus sans ID d√©tect√©s`);
      }
      
      return contenus;
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration tous contenus:', error);
      throw new ServiceError('Erreur lors de la r√©cup√©ration des contenus', error);
    }
  }

  async update(id: string, data: Partial<ContenuDashboard>): Promise<void> {
    try {
      console.log(`‚úèÔ∏è Mise √† jour contenu ID:`, id);
      console.log(`üìù Donn√©es de mise √† jour:`, data);
      
      if (!id || id.trim() === '') {
        throw new ServiceError('ID vide pour mise √† jour contenu');
      }
      
      // V√©rifier que le contenu existe
      const existingDoc = await this.collection.doc(id).get();
      if (!existingDoc.exists) {
        throw new ServiceError(`Contenu ${id} non trouv√© pour mise √† jour`);
      }
      
      // Nettoyer les donn√©es (enlever les champs non modifiables)
      const { id: _, createdAt, ...cleanData } = data as any;
      
      const updateData = {
        ...cleanData,
        updatedAt: dbUtils.timestamp(),
      };
      
      await this.collection.doc(id).update(updateData);
      console.log(`‚úÖ Contenu ${id} mis √† jour avec succ√®s`);
      
    } catch (error) {
      console.error(`‚ùå Erreur mise √† jour contenu ${id}:`, error);
      throw new ServiceError(`Erreur lors de la mise √† jour du contenu ${id}`, error);
    }
  }

  async delete(id: string): Promise<void> {
    try {
      console.log(`üóëÔ∏è Suppression contenu ID:`, id);
      
      if (!id || id.trim() === '') {
        throw new ServiceError('ID vide pour suppression contenu');
      }
      
      // V√©rifier que le contenu existe
      const existingDoc = await this.collection.doc(id).get();
      if (!existingDoc.exists) {
        console.warn(`‚ö†Ô∏è Contenu ${id} d√©j√† supprim√© ou inexistant`);
        return; // Ne pas lever d'erreur si d√©j√† supprim√©
      }
      
      const existingData = existingDoc.data();
      console.log(`üìã Contenu √† supprimer:`, existingData?.nom || 'Sans nom');
      
      await this.collection.doc(id).delete();
      console.log(`‚úÖ Contenu ${id} supprim√© avec succ√®s`);
      
      // V√©rifier que la suppression a bien eu lieu
      const deletedDoc = await this.collection.doc(id).get();
      if (deletedDoc.exists) {
        throw new ServiceError(`√âchec de la suppression du contenu ${id}`);
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur suppression contenu ${id}:`, error);
      throw new ServiceError(`Erreur lors de la suppression du contenu ${id}`, error);
    }
  }

  async getByLaala(laalaId: string): Promise<ContenuDashboard[]> {
    try {
      console.log('üìã R√©cup√©ration contenus pour Laala:', laalaId);
      
      // Requ√™te simple sans orderBy pour √©viter l'erreur d'index
      const query = this.collection.where('idLaala', '==', laalaId);
      
      const snapshot = await query.get();
      
      const contenus = snapshot.docs.map(doc => {
        const data = doc.data();
        return {
          ...data,
          id: doc.id // S'assurer que l'ID Firestore est utilis√©
        } as ContenuDashboard;
      });
      
      // Tri c√¥t√© client par position
      contenus.sort((a, b) => (a.position || 0) - (b.position || 0));
      
      console.log(`‚úÖ ${contenus.length} contenus trouv√©s pour Laala ${laalaId}`);
      
      return contenus;
      
    } catch (error) {
      console.error(`‚ùå Erreur r√©cup√©ration contenus Laala ${laalaId}:`, error);
      throw new ServiceError(`Erreur lors de la r√©cup√©ration des contenus du Laala ${laalaId}`, error);
    }
  }

  // M√©thode utilitaire pour v√©rifier l'int√©grit√© des donn√©es
  async checkDataIntegrity(): Promise<{
    collectionName: string;
    totalItems: number;
    itemsWithIds: number;
    itemsWithoutIds: number;
    sampleIds: string[];
    healthStatus: "Excellent" | "Bon" | "Probl√©matique" | "Critique";
  }> {
    try {
      const allContenus = await this.getAll();
      const contenusWithIds = allContenus.filter(c => c.id && c.id.trim() !== '');
      const contenusWithoutIds = allContenus.filter(c => !c.id || c.id.trim() === '');
      
      // D√©terminer le statut de sant√©
      const totalItems = allContenus.length;
      const itemsWithIds = contenusWithIds.length;
      const itemsWithoutIds = contenusWithoutIds.length;
      
      let healthStatus: "Excellent" | "Bon" | "Probl√©matique" | "Critique";
      if (itemsWithoutIds === 0) {
        healthStatus = "Excellent";
      } else if (itemsWithoutIds < totalItems * 0.1) {
        healthStatus = "Bon";
      } else if (itemsWithoutIds < totalItems * 0.3) {
        healthStatus = "Probl√©matique";
      } else {
        healthStatus = "Critique";
      }
      
      return {
        collectionName: 'contenus',
        totalItems,
        itemsWithIds,
        itemsWithoutIds,
        sampleIds: contenusWithIds.slice(0, 5).map(c => c.id),
        healthStatus
      };
    } catch (error) {
      console.error('‚ùå Erreur v√©rification int√©grit√©:', error);
      throw new ServiceError('Erreur lors de la v√©rification de l\'int√©grit√© des donn√©es', error);
    }
  }
}
