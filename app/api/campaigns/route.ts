import { NextRequest, NextResponse } from 'next/server';
import { CampaignService } from '../../Backend/services';
import { adminAuth } from '../../Backend/config/firebase-admin';

// Instances des services
const campaignService = new CampaignService();

// GET - R√©cup√©rer toutes les campagnes ou celles d'un utilisateur
export async function GET(request: NextRequest) {
  try {
    // V√©rification de l'authentification
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Token d\'authentification requis' }, 
        { status: 401 }
      );
    }

    const token = authHeader.split('Bearer ')[1];
    const decodedToken = await adminAuth.verifyIdToken(token);
    const currentUserId = decodedToken.uid;

    console.log('üîç R√©cup√©ration campagnes pour utilisateur:', currentUserId);

    // R√©cup√©rer les param√®tres de requ√™te
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');

    let campaigns;
    if (userId && userId !== 'all') {
      // R√©cup√©rer les campagnes d'un utilisateur sp√©cifique
      campaigns = await campaignService.getCampaignsByUser(userId);
    } else {
      // R√©cup√©rer toutes les campagnes ou celles de l'utilisateur actuel
      campaigns = await campaignService.getCampaignsByUser(currentUserId);
    }

    console.log(`‚úÖ ${campaigns.length} campagnes r√©cup√©r√©es`);

    return NextResponse.json({
      success: true,
      data: campaigns,
      message: `${campaigns.length} campagne(s) r√©cup√©r√©e(s)`
    });

  } catch (error) {
    console.error('‚ùå Erreur GET campaigns:', error);
    
    if (error instanceof Error && error.message.includes('auth')) {
      return NextResponse.json(
        { error: 'Token invalide' }, 
        { status: 401 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Erreur lors de la r√©cup√©ration des campagnes',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      }, 
      { status: 500 }
    );
  }
}

// POST - Cr√©er une nouvelle campagne
export async function POST(request: NextRequest) {
  try {
    // V√©rification de l'authentification
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Token d\'authentification requis' }, 
        { status: 401 }
      );
    }

    const token = authHeader.split('Bearer ')[1];
    const decodedToken = await adminAuth.verifyIdToken(token);
    const currentUserId = decodedToken.uid;

    console.log('üìù Cr√©ation campagne par utilisateur:', currentUserId);

    // R√©cup√©rer les donn√©es du body
    const campaignData = await request.json();
    console.log('üìÑ Donn√©es campagne re√ßues:', campaignData);

    // Validation basique
    if (!campaignData.name || !campaignData.description) {
      return NextResponse.json(
        { error: 'Nom et description requis' }, 
        { status: 400 }
      );
    }

    // Ajouter l'ID de l'utilisateur cr√©ateur
    const dataWithUser = {
      ...campaignData,
      createdBy: currentUserId
    };

    // Cr√©er la campagne
    const campaignId = await campaignService.create(dataWithUser);

    console.log('‚úÖ Campagne cr√©√©e avec ID:', campaignId);

    // R√©cup√©rer la campagne cr√©√©e pour la retourner
    const createdCampaign = await campaignService.getById(campaignId);

    return NextResponse.json({
      success: true,
      data: createdCampaign,
      message: 'Campagne cr√©√©e avec succ√®s'
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå Erreur POST campaigns:', error);
    
    if (error instanceof Error && error.message.includes('auth')) {
      return NextResponse.json(
        { error: 'Token invalide' }, 
        { status: 401 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Erreur lors de la cr√©ation de la campagne',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      }, 
      { status: 500 }
    );
  }
}

// PUT - Mettre √† jour une campagne
export async function PUT(request: NextRequest) {
  try {
    // V√©rification de l'authentification
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Token d\'authentification requis' }, 
        { status: 401 }
      );
    }

    const token = authHeader.split('Bearer ')[1];
    const decodedToken = await adminAuth.verifyIdToken(token);
    const currentUserId = decodedToken.uid;

    console.log('‚úèÔ∏è Mise √† jour campagne par utilisateur:', currentUserId);

    // R√©cup√©rer les donn√©es du body
    const updateData = await request.json();
    console.log('üìÑ Donn√©es mise √† jour campagne:', updateData);

    // Validation basique
    if (!updateData.id) {
      return NextResponse.json(
        { error: 'ID de la campagne requis' }, 
        { status: 400 }
      );
    }

    const { id, ...dataToUpdate } = updateData;

    // V√©rifier que la campagne existe et appartient √† l'utilisateur
    const existingCampaign = await campaignService.getById(id);
    if (!existingCampaign) {
      return NextResponse.json(
        { error: 'Campagne non trouv√©e' }, 
        { status: 404 }
      );
    }

    if (existingCampaign.createdBy !== currentUserId) {
      return NextResponse.json(
        { error: 'Non autoris√© √† modifier cette campagne' }, 
        { status: 403 }
      );
    }

    // Mettre √† jour la campagne
    await campaignService.update(id, dataToUpdate);

    console.log('‚úÖ Campagne mise √† jour:', id);

    // R√©cup√©rer la campagne mise √† jour
    const updatedCampaign = await campaignService.getById(id);

    return NextResponse.json({
      success: true,
      data: updatedCampaign,
      message: 'Campagne mise √† jour avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur PUT campaigns:', error);
    
    if (error instanceof Error && error.message.includes('auth')) {
      return NextResponse.json(
        { error: 'Token invalide' }, 
        { status: 401 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Erreur lors de la mise √† jour de la campagne',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      }, 
      { status: 500 }
    );
  }
}

// DELETE - Supprimer une campagne
export async function DELETE(request: NextRequest) {
  try {
    // V√©rification de l'authentification
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Token d\'authentification requis' }, 
        { status: 401 }
      );
    }

    const token = authHeader.split('Bearer ')[1];
    const decodedToken = await adminAuth.verifyIdToken(token);
    const currentUserId = decodedToken.uid;

    console.log('üóëÔ∏è Suppression campagne par utilisateur:', currentUserId);

    // R√©cup√©rer l'ID depuis les param√®tres de requ√™te
    const { searchParams } = new URL(request.url);
    const campaignId = searchParams.get('id');

    if (!campaignId) {
      return NextResponse.json(
        { error: 'ID de la campagne requis' }, 
        { status: 400 }
      );
    }

    // V√©rifier que la campagne existe et appartient √† l'utilisateur
    const existingCampaign = await campaignService.getById(campaignId);
    if (!existingCampaign) {
      return NextResponse.json(
        { error: 'Campagne non trouv√©e' }, 
        { status: 404 }
      );
    }

    if (existingCampaign.createdBy !== currentUserId) {
      return NextResponse.json(
        { error: 'Non autoris√© √† supprimer cette campagne' }, 
        { status: 403 }
      );
    }

    // Supprimer la campagne
    await campaignService.delete(campaignId);

    console.log('‚úÖ Campagne supprim√©e:', campaignId);

    return NextResponse.json({
      success: true,
      message: 'Campagne supprim√©e avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur DELETE campaigns:', error);
    
    if (error instanceof Error && error.message.includes('auth')) {
      return NextResponse.json(
        { error: 'Token invalide' }, 
        { status: 401 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Erreur lors de la suppression de la campagne',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      }, 
      { status: 500 }
    );
  }
}
