// ===== TEST FIRESTORE EN MODE PRODUCTION =====
// Test sp√©cifique pour v√©rifier que Firestore fonctionne apr√®s activation

import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç Test Firestore en mode production...');
    
    // Import de la configuration Backend
    const { 
      adminDb, 
      validateFirebaseConfig, 
      testFirebaseConnection 
    } = await import('../../Backend/config/firebase-admin');
    
    // 1. Validation de la configuration
    validateFirebaseConfig();
    console.log('‚úÖ Configuration valid√©e');
    
    // 2. Test de connexion Firestore
    try {
      const testCollection = adminDb.collection('_connection_test');
      
      // Test d'√©criture
      const docRef = await testCollection.add({
        message: 'Test de connexion Firestore',
        timestamp: new Date(),
        mode: 'production'
      });
      console.log('‚úÖ √âcriture Firestore r√©ussie:', docRef.id);
      
      // Test de lecture
      const doc = await testCollection.doc(docRef.id).get();
      if (doc.exists) {
        console.log('‚úÖ Lecture Firestore r√©ussie');
        
        // Nettoyage - suppression du document de test
        await testCollection.doc(docRef.id).delete();
        console.log('‚úÖ Suppression du document de test r√©ussie');
      }
      
      return NextResponse.json({
        success: true,
        message: 'Firestore fonctionne parfaitement en mode production !',
        timestamp: new Date().toISOString(),
        tests: {
          configuration: '‚úÖ Valid√©e',
          write: '‚úÖ √âcriture r√©ussie',
          read: '‚úÖ Lecture r√©ussie',
          delete: '‚úÖ Suppression r√©ussie'
        },
        nextSteps: [
          '‚úÖ Firestore est op√©rationnel',
          'üöÄ Vous pouvez maintenant d√©velopper votre backend',
          '‚ö†Ô∏è Pensez √† s√©curiser les r√®gles Firestore avant la production'
        ]
      });
      
    } catch (firestoreError) {
      console.error('‚ùå Erreur Firestore:', firestoreError);
      
      // Analyse de l'erreur
      let errorAnalysis = 'Erreur inconnue';
      let solution = 'V√©rifiez la configuration';
      
      if (firestoreError instanceof Error) {
        if (firestoreError.message.includes('PERMISSION_DENIED')) {
          errorAnalysis = 'R√®gles Firestore trop restrictives';
          solution = 'Modifiez les r√®gles Firestore pour permettre l\'acc√®s en d√©veloppement';
        } else if (firestoreError.message.includes('NOT_FOUND')) {
          errorAnalysis = 'Base de donn√©es Firestore introuvable';
          solution = 'V√©rifiez que Firestore est bien activ√©';
        }
      }
      
      return NextResponse.json({
        success: false,
        error: 'Erreur Firestore',
        details: {
          message: firestoreError instanceof Error ? firestoreError.message : 'Erreur inconnue',
          analysis: errorAnalysis,
          solution: solution
        },
        troubleshooting: [
          '1. V√©rifiez que Firestore Database est activ√©',
          '2. Modifiez les r√®gles Firestore (onglet Rules)',
          '3. Utilisez les r√®gles temporaires pour le d√©veloppement',
          '4. Attendez quelques minutes apr√®s modification des r√®gles'
        ]
      }, { status: 500 });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Erreur de configuration',
      details: {
        message: error instanceof Error ? error.message : 'Erreur inconnue'
      }
    }, { status: 500 });
  }
}