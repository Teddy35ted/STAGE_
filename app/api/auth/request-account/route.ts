// API pour soumettre une demande de cr√©ation de compte
// MODIFI√â : Retour √† l'ancien syst√®me direct sans approbation administrative
import { NextRequest, NextResponse } from 'next/server';
import { AccountRequestService } from '../../../Backend/services/collections/AccountRequestService';
import { UserService } from '../../../Backend/services/collections/UserService';
import { PasswordGeneratorService } from '../../../Backend/services/utils/PasswordGeneratorService';
import { EmailService } from '../../../Backend/services/email/EmailService';

const accountRequestService = new AccountRequestService();
const userService = new UserService();
const emailService = new EmailService();

export async function POST(request: NextRequest) {
  try {
    console.log('üîç API POST /api/auth/request-account appel√©e');
    
    const { email } = await request.json();
    console.log('üìß Email re√ßu:', email);

    // Validation de base
    if (!email || !email.trim()) {
      console.log('‚ùå Email manquant');
      return NextResponse.json({
        success: false,
        error: 'L\'email est requis'
      }, { status: 400 });
    }

    // V√©rifier que l'email est valide
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      console.log('‚ùå Email invalide:', email);
      return NextResponse.json({
        success: false,
        error: 'Format d\'email invalide'
      }, { status: 400 });
    }

    console.log('‚úÖ Email valide, v√©rification utilisateur existant...');

    // V√©rifier qu'aucun utilisateur n'existe d√©j√† avec cet email
    const existingUser = await userService.getByEmail(email);
    if (existingUser) {
      console.log('‚ùå Utilisateur d√©j√† existant:', email);
      return NextResponse.json({
        success: false,
        error: 'Un compte existe d√©j√† avec cet email'
      }, { status: 409 });
    }

    console.log('‚úÖ Aucun utilisateur existant, cr√©ation directe du compte...');

    // ANCIEN SYST√àME : Cr√©er directement l'utilisateur avec mot de passe temporaire
    // G√©n√©rer un mot de passe temporaire
    const temporaryPassword = PasswordGeneratorService.generateTemporaryPassword();
    console.log('üîê Mot de passe temporaire g√©n√©r√©');

    // Cr√©er l'utilisateur directement
    const userId = await userService.createUserWithTemporaryPassword(email, temporaryPassword);
    console.log('‚úÖ Utilisateur cr√©√© avec ID:', userId);

    // Envoyer l'email avec le mot de passe temporaire
    try {
      await emailService.sendWelcomeEmailWithTemporaryPassword(email, temporaryPassword);
      console.log('‚úÖ Email de bienvenue envoy√© √†:', email);
    } catch (emailError) {
      console.warn('‚ö†Ô∏è Erreur envoi email (non bloquante):', emailError);
    }

    console.log('‚úÖ Compte cr√©√© avec succ√®s (ancien syst√®me direct)');

    return NextResponse.json({
      success: true,
      message: 'Votre compte a √©t√© cr√©√© avec succ√®s ! Vous allez recevoir un email avec votre mot de passe temporaire.',
      userId
    });

  } catch (error: any) {
    console.error('‚ùå Erreur cr√©ation de compte:', error);
    console.error('‚ùå Stack trace:', error.stack);

    return NextResponse.json({
      success: false,
      error: 'Erreur lors de la cr√©ation du compte'
    }, { status: 500 });
  }
}
