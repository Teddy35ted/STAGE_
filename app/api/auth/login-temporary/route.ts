// API pour la connexion avec mot de passe temporaire et changement obligatoire
import { NextRequest, NextResponse } from 'next/server';
import { UserService } from '../../../Backend/services/collections/UserService';
import { AccountRequestService } from '../../../Backend/services/collections/AccountRequestService';

const userService = new UserService();
const accountRequestService = new AccountRequestService();

export async function POST(request: NextRequest) {
  try {
    const { email, temporaryPassword, newPassword } = await request.json();

    console.log('üîç Tentative de connexion temporaire:', { 
      email, 
      hasTemporaryPassword: !!temporaryPassword,
      hasNewPassword: !!newPassword 
    });

    // Validation de base
    if (!email || !temporaryPassword) {
      console.log('‚ùå Validation √©chou√©e: donn√©es manquantes');
      return NextResponse.json({
        success: false,
        error: 'Email et mot de passe temporaire requis'
      }, { status: 400 });
    }

    // R√©cup√©rer la demande approuv√©e
    console.log('üîç Recherche de la demande pour:', email);
    const accountRequest = await accountRequestService.getByEmail(email);
    
    console.log('üìä Demande trouv√©e:', {
      found: !!accountRequest,
      status: accountRequest?.status,
      isFirstLogin: accountRequest?.isFirstLogin,
      hasTemporaryPassword: !!accountRequest?.temporaryPassword,
      temporaryPasswordMatch: accountRequest?.temporaryPassword === temporaryPassword
    });
    
    if (!accountRequest || accountRequest.status !== 'approved') {
      console.log('‚ùå Demande non trouv√©e ou non approuv√©e');
      return NextResponse.json({
        success: false,
        error: 'Aucune demande approuv√©e trouv√©e pour cet email'
      }, { status: 404 });
    }

    // V√©rifier le mot de passe temporaire
    if (accountRequest.temporaryPassword !== temporaryPassword) {
      console.log('‚ùå Mot de passe temporaire invalide');
      return NextResponse.json({
        success: false,
        error: 'Mot de passe temporaire invalide'
      }, { status: 401 });
    }

    // Si c'est la premi√®re connexion, un nouveau mot de passe est requis
    // Par d√©faut, on consid√®re que c'est toujours la premi√®re connexion si isFirstLogin n'est pas d√©fini
    const isFirstLogin = accountRequest.isFirstLogin !== false; // true si undefined ou true
    
    console.log('üîç √âtat de premi√®re connexion:', { isFirstLogin, hasNewPassword: !!newPassword });
    
    if (isFirstLogin) {
      if (!newPassword || newPassword.length < 6) {
        console.log('‚ùå Nouveau mot de passe requis ou trop court');
        return NextResponse.json({
          success: false,
          error: 'Un nouveau mot de passe d\'au moins 6 caract√®res est requis'
        }, { status: 400 });
      }

      console.log('‚úÖ Cr√©ation du nouveau compte utilisateur');
      // Cr√©er l'utilisateur avec le nouveau mot de passe
      const userData = {
        nom: 'Utilisateur',
        prenom: 'Nouveau',
        email: email,
        tel: '00000000',
        password: newPassword,
        date_de_naissance: '1990-01-01',
        sexe: 'Masculin' as const,
        pays: 'Togo',
        ville: 'Lom√©',
        quartier: '',
        region: '',
        codePays: '+228'
      };

      const userId = await userService.create(userData);
      console.log('‚úÖ Utilisateur cr√©√© avec ID:', userId);

      // Marquer la demande comme utilis√©e (premi√®re connexion termin√©e)
      await accountRequestService.update(accountRequest.id, {
        isFirstLogin: false,
        temporaryPassword: undefined // Supprimer le mot de passe temporaire
      });
      console.log('‚úÖ Demande mise √† jour');

      return NextResponse.json({
        success: true,
        message: 'Compte cr√©√© avec succ√®s. Vous pouvez maintenant vous connecter avec votre nouveau mot de passe.',
        userId,
        requiresProfileCompletion: true
      });
    } else {
      console.log('üîç Connexion existante - recherche utilisateur');
      // Si ce n'est pas la premi√®re connexion, authentifier normalement
      const user = await userService.getByEmail(email);
      if (!user) {
        console.log('‚ùå Utilisateur introuvable');
        return NextResponse.json({
          success: false,
          error: 'Utilisateur introuvable'
        }, { status: 404 });
      }

      console.log('‚úÖ Utilisateur trouv√©');
      return NextResponse.json({
        success: true,
        message: 'Connexion r√©ussie',
        user: {
          id: user.id,
          email: user.email,
          nom: user.nom,
          prenom: user.prenom
        }
      });
    }

  } catch (error: any) {
    console.error('‚ùå Erreur connexion temporaire:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur lors de la connexion'
    }, { status: 500 });
  }
}
