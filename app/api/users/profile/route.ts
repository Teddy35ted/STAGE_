import { NextRequest, NextResponse } from 'next/server';
import { getAuth } from 'firebase-admin/auth';
// Import de la configuration Firebase Admin existante
import { adminAuth } from '../../../Backend/config/firebase-admin';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç API Profile: D√©but de la requ√™te');
    
    // R√©cup√©rer le token d'authentification
    const authHeader = request.headers.get('authorization');
    console.log('üîë Auth header pr√©sent:', !!authHeader);
    
    if (!authHeader?.startsWith('Bearer ')) {
      console.log('‚ùå Token manquant ou format incorrect');
      return NextResponse.json({ error: 'Token manquant' }, { status: 401 });
    }

    const token = authHeader.substring(7);
    console.log('üîê Token extrait, longueur:', token.length);
    
    // V√©rifier le token avec adminAuth au lieu de getAuth()
    const decodedToken = await adminAuth.verifyIdToken(token);
    const uid = decodedToken.uid;
    console.log('‚úÖ Token v√©rifi√© pour UID:', uid);

    // R√©cup√©rer les informations utilisateur
    const userRecord = await adminAuth.getUser(uid);
    console.log('üë§ Utilisateur r√©cup√©r√©:', userRecord.email);
    
    // Extraire les informations du profil
    const profile = {
      uid: userRecord.uid,
      email: userRecord.email,
      displayName: userRecord.displayName,
      nom: userRecord.customClaims?.nom || userRecord.displayName?.split(' ').pop(),
      prenom: userRecord.customClaims?.prenom || userRecord.displayName?.split(' ')[0],
    };

    console.log('‚úÖ Profil pr√©par√©:', profile);
    return NextResponse.json(profile);
  } catch (error) {
    console.error('‚ùå Erreur API Profile:', error);
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
    return NextResponse.json(
      { error: 'Erreur lors de la r√©cup√©ration du profil', details: errorMessage },
      { status: 500 }
    );
  }
}
