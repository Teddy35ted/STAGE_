#!/usr/bin/env node

/**
 * Script de v√©rification et configuration pour le bucket "medias"
 * Ce script v√©rifie que votre bucket "medias" est correctement configur√©
 */

const { Client, Storage, Permission, Role } = require('appwrite');

// Configuration
const APPWRITE_ENDPOINT = 'https://nyc.cloud.appwrite.io/v1';
const APPWRITE_PROJECT_ID = '688f85190004fa948692';
const APPWRITE_API_KEY = process.env.APPWRITE_API_KEY; // Cl√© API admin requise

// Configuration recommand√©e pour le bucket "medias"
const BUCKET_CONFIG = {
  id: 'medias',
  name: 'M√©dias La-√†-La',
  permissions: [
    Permission.read(Role.any()),
    Permission.create(Role.users()),
    Permission.update(Role.users()),
    Permission.delete(Role.users())
  ],
  fileSecurity: true,
  enabled: true,
  maximumFileSize: 100 * 1024 * 1024, // 100MB
  allowedFileExtensions: [
    // Images
    'jpg', 'jpeg', 'png', 'gif', 'webp', 'svg',
    // Vid√©os
    'mp4', 'avi', 'mov', 'wmv', 'webm', 'mkv'
  ],
  compression: 'gzip',
  encryption: true,
  antivirus: true
};

async function checkMediasBucket() {
  console.log('üîç V√©rification du bucket "medias"...\n');

  if (!APPWRITE_API_KEY) {
    console.log('‚ö†Ô∏è  APPWRITE_API_KEY non fournie - v√©rification en mode lecture seule');
    console.log('üí° Pour une configuration compl√®te, d√©finissez APPWRITE_API_KEY\n');
  }

  // Initialiser le client Appwrite
  const client = new Client()
    .setEndpoint(APPWRITE_ENDPOINT)
    .setProject(APPWRITE_PROJECT_ID);

  if (APPWRITE_API_KEY) {
    client.setKey(APPWRITE_API_KEY);
  }

  const storage = new Storage(client);

  console.log(`üì° Connexion √† Appwrite...`);
  console.log(`   Endpoint: ${APPWRITE_ENDPOINT}`);
  console.log(`   Project: ${APPWRITE_PROJECT_ID}\n`);

  try {
    // V√©rifier si le bucket existe
    const bucket = await storage.getBucket(BUCKET_CONFIG.id);
    
    console.log(`‚úÖ Bucket "${BUCKET_CONFIG.id}" trouv√© !`);
    console.log(`   üìù Nom: ${bucket.name}`);
    console.log(`   üìä Fichiers: ${bucket.filesTotal || 0}`);
    console.log(`   üìè Taille totale: ${formatFileSize(bucket.filesTotalSize || 0)}`);
    console.log(`   üì¶ Taille max par fichier: ${formatFileSize(bucket.maximumFileSize || 0)}`);
    console.log(`   üîí S√©curit√© des fichiers: ${bucket.fileSecurity ? 'Activ√©e' : 'D√©sactiv√©e'}`);
    console.log(`   ‚úÖ Statut: ${bucket.enabled ? 'Activ√©' : 'D√©sactiv√©'}`);

    // V√©rifier les extensions autoris√©es
    if (bucket.allowedFileExtensions && bucket.allowedFileExtensions.length > 0) {
      console.log(`   üìé Extensions autoris√©es: ${bucket.allowedFileExtensions.join(', ')}`);
    } else {
      console.log(`   üìé Extensions: Toutes autoris√©es`);
    }

    // V√©rifier les permissions
    console.log(`\nüîê Permissions:`);
    if (bucket.permissions && bucket.permissions.length > 0) {
      bucket.permissions.forEach(permission => {
        console.log(`   ‚Ä¢ ${permission}`);
      });
    } else {
      console.log(`   ‚ö†Ô∏è  Aucune permission d√©finie`);
    }

    // Recommandations
    console.log(`\nüí° Recommandations:`);
    
    if (bucket.maximumFileSize < BUCKET_CONFIG.maximumFileSize) {
      console.log(`   ‚ö†Ô∏è  Taille max recommand√©e: ${formatFileSize(BUCKET_CONFIG.maximumFileSize)}`);
    } else {
      console.log(`   ‚úÖ Taille maximale: OK`);
    }

    if (!bucket.fileSecurity) {
      console.log(`   ‚ö†Ô∏è  Activez la s√©curit√© des fichiers pour de meilleures permissions`);
    } else {
      console.log(`   ‚úÖ S√©curit√© des fichiers: OK`);
    }

    if (!bucket.enabled) {
      console.log(`   ‚ùå Le bucket est d√©sactiv√© - activez-le dans la console Appwrite`);
    } else {
      console.log(`   ‚úÖ Bucket activ√©: OK`);
    }

    // Lister quelques fichiers pour voir l'organisation
    console.log(`\nüìÅ Organisation des fichiers:`);
    const files = await storage.listFiles(BUCKET_CONFIG.id, [], 10);
    
    if (files.files.length > 0) {
      console.log(`   Exemples de fichiers (${files.files.length} sur ${files.total}) :`);
      files.files.slice(0, 5).forEach(file => {
        console.log(`   üìÑ ${file.name} (${formatFileSize(file.sizeOriginal)})`);
      });
      
      // Analyser l'organisation
      const folders = {};
      files.files.forEach(file => {
        const pathParts = file.name.split('/');
        if (pathParts.length > 1) {
          const folder = pathParts[0];
          folders[folder] = (folders[folder] || 0) + 1;
        }
      });
      
      if (Object.keys(folders).length > 0) {
        console.log(`\n   üìÇ Dossiers d√©tect√©s:`);
        Object.entries(folders).forEach(([folder, count]) => {
          console.log(`   ‚Ä¢ ${folder}/: ${count} fichier(s)`);
        });
      }
    } else {
      console.log(`   üìÅ Aucun fichier pour le moment`);
      console.log(`   üí° Testez l'upload depuis votre application`);
    }

    console.log(`\nüéâ Configuration du bucket "medias" v√©rifi√©e !`);
    console.log(`\nüìã Prochaines √©tapes:`);
    console.log(`1. Testez l'upload depuis votre application`);
    console.log(`2. V√©rifiez que les fichiers sont organis√©s par dossiers`);
    console.log(`3. Confirmez que les URLs g√©n√©r√©es fonctionnent`);

  } catch (error) {
    if (error.code === 404) {
      console.log(`‚ùå Bucket "${BUCKET_CONFIG.id}" non trouv√© !`);
      console.log(`\nüìã Pour cr√©er le bucket "medias":`);
      console.log(`1. Allez dans votre console Appwrite`);
      console.log(`2. Section Storage > Create Bucket`);
      console.log(`3. Utilisez ces param√®tres:`);
      console.log(`   ‚Ä¢ ID: ${BUCKET_CONFIG.id}`);
      console.log(`   ‚Ä¢ Nom: ${BUCKET_CONFIG.name}`);
      console.log(`   ‚Ä¢ Taille max: ${formatFileSize(BUCKET_CONFIG.maximumFileSize)}`);
      console.log(`   ‚Ä¢ Extensions: ${BUCKET_CONFIG.allowedFileExtensions.join(', ')}`);
      console.log(`   ‚Ä¢ Permissions:`);
      console.log(`     - Read: any`);
      console.log(`     - Create: users`);
      console.log(`     - Update: users`);
      console.log(`     - Delete: users`);
    } else {
      console.error(`‚ùå Erreur lors de la v√©rification:`, error.message);
      
      if (error.code === 401) {
        console.log(`üí° V√©rifiez votre cl√© API ou les permissions`);
      }
    }
  }
}

async function testUpload() {
  console.log('üß™ Test d\'upload (simulation)...\n');
  
  console.log('üì§ Simulation d\'upload pour chaque cat√©gorie:');
  console.log('   ‚Ä¢ user-avatar ‚Üí medias/users/avatars/2024-01-15/userId/avatar.jpg');
  console.log('   ‚Ä¢ laala-cover ‚Üí medias/laalas/covers/2024-01-15/userId/laalaId/cover.mp4');
  console.log('   ‚Ä¢ contenu-media ‚Üí medias/contenus/media/2024-01-15/userId/contenuId/video.mp4');
  console.log('   ‚Ä¢ boutique-image ‚Üí medias/boutiques/images/2024-01-15/userId/boutiqueId/image.jpg');
  
  console.log('\nüí° Pour tester r√©ellement:');
  console.log('1. Utilisez les composants MediaUpload dans votre app');
  console.log('2. V√©rifiez que userId est fourni');
  console.log('3. Confirmez l\'organisation automatique des fichiers');
}

function formatFileSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// CLI
const command = process.argv[2];

switch (command) {
  case 'check':
  case undefined:
    checkMediasBucket().catch(console.error);
    break;
  case 'test':
    testUpload();
    break;
  default:
    console.log('Usage:');
    console.log('  node scripts/setup-medias-bucket.js [check]  - V√©rifier le bucket "medias"');
    console.log('  node scripts/setup-medias-bucket.js test     - Simuler les uploads');
    console.log('');
    console.log('Variables d\'environnement optionnelles:');
    console.log('  APPWRITE_API_KEY - Cl√© API admin pour configuration avanc√©e');
    console.log('');
    console.log('Configuration requise dans Appwrite Console:');
    console.log('  ‚Ä¢ Bucket ID: medias');
    console.log('  ‚Ä¢ Taille max: 100MB');
    console.log('  ‚Ä¢ Extensions: jpg, jpeg, png, gif, webp, svg, mp4, avi, mov, wmv, webm, mkv');
    console.log('  ‚Ä¢ Permissions: read(any), create(users), update(users), delete(users)');
    break;
}

module.exports = {
  checkMediasBucket,
  testUpload,
  BUCKET_CONFIG
};