#!/usr/bin/env node

/**
 * Script de test pour valider le syst√®me de co-gestionnaires
 * Usage: node test-cogestionnaire-system.js
 */

const BASE_URL = 'http://localhost:3000';

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function success(message) {
  log('green', `‚úÖ ${message}`);
}

function error(message) {
  log('red', `‚ùå ${message}`);
}

function info(message) {
  log('blue', `‚ÑπÔ∏è ${message}`);
}

function warning(message) {
  log('yellow', `‚ö†Ô∏è ${message}`);
}

class CoGestionnaireTestSuite {
  constructor() {
    this.ownerToken = null;
    this.coGestionnaireToken = null;
    this.coGestionnaireId = null;
    this.testLaalaId = null;
  }

  async runAllTests() {
    info('üß™ D√©but des tests du syst√®me Co-gestionnaire');
    
    try {
      // Tests pr√©paratoires
      await this.testOwnerAuthentication();
      await this.testCreateCoGestionnaire();
      await this.testCoGestionnaireAuthentication();
      
      // Tests de permissions
      await this.testCreateLaalaWithCoGestionnaire();
      await this.testUnauthorizedActions();
      
      // Tests de r√©vocation
      await this.testDeleteCoGestionnaire();
      await this.testRevokedAccess();
      
      // Tests d'audit
      await this.testAuditLogs();
      
      success('üéâ Tous les tests sont pass√©s !');
    } catch (error) {
      console.error(`üí• √âchec des tests: ${error.message}`);
      process.exit(1);
    }
  }

  async makeRequest(method, endpoint, data = null, token = null) {
    const fetch = (await import('node-fetch')).default;
    
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` })
      },
      ...(data && { body: JSON.stringify(data) })
    };

    const response = await fetch(`${BASE_URL}${endpoint}`, options);
    const result = await response.json();
    
    return { status: response.status, data: result };
  }

  async testOwnerAuthentication() {
    info('üîê Test 1: Authentification propri√©taire');
    
    // Simule l'authentification du propri√©taire
    // En production, r√©cup√©rer un vrai token Firebase
    this.ownerToken = 'OWNER_TOKEN_HERE'; // √Ä remplacer par un vrai token
    
    warning('‚ö†Ô∏è Remplacez OWNER_TOKEN_HERE par un vrai token Firebase du propri√©taire');
    success('Authentification propri√©taire simul√©e');
  }

  async testCreateCoGestionnaire() {
    info('üë• Test 2: Cr√©ation co-gestionnaire');
    
    const coGestionnaireData = {
      nom: 'Dupont',
      prenom: 'Jean',
      email: `test-cogest-${Date.now()}@example.com`,
      tel: '0123456789',
      pays: 'France',
      ville: 'Paris',
      ACCES: 'gerer',
      permissions: [
        {
          resource: 'laalas',
          actions: ['create', 'read', 'update']
        },
        {
          resource: 'contenus',
          actions: ['read', 'update']
        }
      ],
      password: 'MotDePasseSecurise123!'
    };

    const { status, data } = await this.makeRequest(
      'POST', 
      '/api/co-gestionnaires', 
      coGestionnaireData, 
      this.ownerToken
    );

    if (status === 201 && data.success) {
      this.coGestionnaireId = data.id;
      success(`Co-gestionnaire cr√©√© avec ID: ${this.coGestionnaireId}`);
    } else {
      throw new Error(`√âchec cr√©ation co-gestionnaire: ${JSON.stringify(data)}`);
    }
  }

  async testCoGestionnaireAuthentication() {
    info('üîë Test 3: Authentification co-gestionnaire');
    
    const authData = {
      email: `test-cogest-${Date.now()}@example.com`, // M√™me email que cr√©ation
      password: 'MotDePasseSecurise123!'
    };

    const { status, data } = await this.makeRequest(
      'POST', 
      '/api/auth/co-gestionnaire', 
      authData
    );

    if (status === 200 && data.success) {
      this.coGestionnaireToken = data.data.token;
      success('Co-gestionnaire authentifi√© avec succ√®s');
    } else {
      throw new Error(`√âchec authentification co-gestionnaire: ${JSON.stringify(data)}`);
    }
  }

  async testCreateLaalaWithCoGestionnaire() {
    info('üìù Test 4: Cr√©ation laala avec co-gestionnaire');
    
    const laalaData = {
      nom: 'Test Laala Co-gestionnaire',
      description: 'Cr√©√© par un co-gestionnaire',
      type: 'Laala freestyle',
      categorie: 'test',
      isLaalaPublic: true,
      ismonetise: false,
      choosetext: true,
      chooseimg: false,
      choosevideo: false,
      chooselive: false
    };

    const { status, data } = await this.makeRequest(
      'POST', 
      '/api/laalas', 
      laalaData, 
      this.coGestionnaireToken
    );

    if (status === 201 && data.id) {
      this.testLaalaId = data.id;
      success(`Laala cr√©√© par co-gestionnaire avec ID: ${this.testLaalaId}`);
    } else {
      throw new Error(`√âchec cr√©ation laala par co-gestionnaire: ${JSON.stringify(data)}`);
    }
  }

  async testUnauthorizedActions() {
    info('üö´ Test 5: Actions non autoris√©es');
    
    // Tenter de cr√©er un autre co-gestionnaire (doit √©chouer)
    const { status } = await this.makeRequest(
      'POST', 
      '/api/co-gestionnaires', 
      { nom: 'Test' }, 
      this.coGestionnaireToken
    );

    if (status === 403 || status === 401) {
      success('Acc√®s refus√© comme attendu pour cr√©ation co-gestionnaire');
    } else {
      throw new Error('Co-gestionnaire ne devrait pas pouvoir cr√©er d\'autres co-gestionnaires');
    }

    // Tenter d'acc√©der aux boutiques (doit √©chouer)
    const boutiquesResponse = await this.makeRequest(
      'GET', 
      '/api/boutiques', 
      null, 
      this.coGestionnaireToken
    );

    if (boutiquesResponse.status === 403 || boutiquesResponse.status === 401) {
      success('Acc√®s refus√© comme attendu pour les boutiques');
    } else {
      warning('‚ö†Ô∏è Co-gestionnaire ne devrait pas avoir acc√®s aux boutiques');
    }
  }

  async testDeleteCoGestionnaire() {
    info('üóëÔ∏è Test 6: Suppression co-gestionnaire');
    
    const { status, data } = await this.makeRequest(
      'DELETE', 
      `/api/co-gestionnaires/${this.coGestionnaireId}`, 
      null, 
      this.ownerToken
    );

    if (status === 200 && data.success) {
      success('Co-gestionnaire supprim√© avec succ√®s');
    } else {
      throw new Error(`√âchec suppression co-gestionnaire: ${JSON.stringify(data)}`);
    }
  }

  async testRevokedAccess() {
    info('üîí Test 7: Acc√®s r√©voqu√© apr√®s suppression');
    
    // Tenter d'utiliser l'ancien token
    const { status } = await this.makeRequest(
      'GET', 
      '/api/laalas', 
      null, 
      this.coGestionnaireToken
    );

    if (status === 401 || status === 403) {
      success('Acc√®s correctement r√©voqu√© apr√®s suppression');
    } else {
      console.error('‚ö†Ô∏è L\'acc√®s n\'a pas √©t√© r√©voqu√© ! Probl√®me de s√©curit√© !');
    }
  }

  async testAuditLogs() {
    info('üìã Test 8: Logs d\'audit');
    
    const { status, data } = await this.makeRequest(
      'GET', 
      '/api/audit-logs', 
      null, 
      this.ownerToken
    );

    if (status === 200 && data.logs && data.logs.length > 0) {
      success(`${data.logs.length} logs d'audit trouv√©s`);
      info(`Exemple de log: ${JSON.stringify(data.logs[0], null, 2)}`);
    } else {
      warning('Aucun log d\'audit trouv√©');
    }
  }
}

// Ex√©cution des tests
if (require.main === module) {
  const testSuite = new CoGestionnaireTestSuite();
  testSuite.runAllTests().catch(console.error);
}

module.exports = CoGestionnaireTestSuite;
